/**
 * Autogenerated by Thrift Compiler (@PACKAGE_VERSION@)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef template_TYPES_H
#define template_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "struct_types.h"


namespace CytxGame {

struct SkillType {
  enum type {
    NORMAL = 0,
    WEAPON = 1
  };
};

extern const std::map<int, const char*> _SkillType_VALUES_TO_NAMES;

class PlayerConfigTable;

class LineSelfConfigTable;

class EnergyOutputConfig;

class EnergyOutputConfigTable;

class TriggerConfig;

class TriggerConfigTable;

class BulletConfig;

class BulletConfigTable;

class NPCConfig;

class NPCConfigTable;

class SoundPath;

class SoundPathMap;

class BattleItemConfig;

class BattleItemConfigTable;

class DropItem;

class DropListConfig;

class DropListConfigTable;

class VersionConfig;

class LimitData;

class LimitGroup;

class FuncData;

class FuncGroup;

class TargetData;

class TargetGroup;

class LimitFuncSceneConfig;

class LimitConfigTable;

class FuncConfigTable;

class TargetConfigTable;

class LimitFuncSceneConfigTable;

class BattleBuffConfig;

class BattleBuffConfigTable;

class SafetyRangePlayerConfig;

class SafetyRangePlayerConfigTable;

class DrawCageConfig;

class DrawCageConfigTable;

class DrawWallConfig;

class DrawWallConfigTable;

class SkillConfig;

class SkillConfigTable;

class InitSkillConfig;

class InitSkillConfigTable;

class MagicConfig;

class MagicConfigTable;

class CategoriesConfig;

class CategoriesConfigTable;

class ModelColliders;

class ModelCollidersConfig;

class ShipConfig;

class ShipConfigTable;

class GameSetConfig;

class GameSetConfigTable;

class HomeConfigTable;

class DeBuffConfig;

class DeBuffListConfig;

class DeBuffConfigTable;

class UltLaserConfig;

class UltPelletConfig;

class UltTraceConfig;

class UltSkillConfigTable;

typedef struct _PlayerConfigTable__isset {
  _PlayerConfigTable__isset() : id(false), speed(false), moveExpend(false), maxHp(false), deathTime(false), maxMp(false), maxInk(false), inkRecover(false), maxBoom(false), attackedIntervalTime(false), score(false), category(false), comPrefab(false), syncHpKey(false), syncMpKey(false), syncDecelerationKey(false), syncRedScoreKey(false), syncBlueScoreKey(false), syncGreenScoreKey(false), syncCountDownKey(false), syncEnergyOutputKey(false), syncRebirthTime(false), syncBaseCampState(false), syncAttackerKey(false) {}
  bool id :1;
  bool speed :1;
  bool moveExpend :1;
  bool maxHp :1;
  bool deathTime :1;
  bool maxMp :1;
  bool maxInk :1;
  bool inkRecover :1;
  bool maxBoom :1;
  bool attackedIntervalTime :1;
  bool score :1;
  bool category :1;
  bool comPrefab :1;
  bool syncHpKey :1;
  bool syncMpKey :1;
  bool syncDecelerationKey :1;
  bool syncRedScoreKey :1;
  bool syncBlueScoreKey :1;
  bool syncGreenScoreKey :1;
  bool syncCountDownKey :1;
  bool syncEnergyOutputKey :1;
  bool syncRebirthTime :1;
  bool syncBaseCampState :1;
  bool syncAttackerKey :1;
} _PlayerConfigTable__isset;

class PlayerConfigTable : public virtual ::apache::thrift::TBase {
 public:

  PlayerConfigTable(const PlayerConfigTable&);
  PlayerConfigTable& operator=(const PlayerConfigTable&);
  PlayerConfigTable() : id(0), speed(0), moveExpend(0), maxHp(0), deathTime(0), maxMp(0), maxInk(0), inkRecover(0), maxBoom(0), attackedIntervalTime(0), score(0), category(0), comPrefab(), syncHpKey(0), syncMpKey(0), syncDecelerationKey(0), syncRedScoreKey(0), syncBlueScoreKey(0), syncGreenScoreKey(0), syncCountDownKey(0), syncEnergyOutputKey(0), syncRebirthTime(0), syncBaseCampState(0), syncAttackerKey(0) {
  }

  virtual ~PlayerConfigTable() throw();
  int32_t id;
  int32_t speed;
  int32_t moveExpend;
  int32_t maxHp;
  int32_t deathTime;
  int32_t maxMp;
  int32_t maxInk;
  int32_t inkRecover;
  int32_t maxBoom;
  int32_t attackedIntervalTime;
  int32_t score;
  int32_t category;
  std::string comPrefab;
  int32_t syncHpKey;
  int32_t syncMpKey;
  int32_t syncDecelerationKey;
  int32_t syncRedScoreKey;
  int32_t syncBlueScoreKey;
  int32_t syncGreenScoreKey;
  int32_t syncCountDownKey;
  int32_t syncEnergyOutputKey;
  int32_t syncRebirthTime;
  int32_t syncBaseCampState;
  int32_t syncAttackerKey;

  _PlayerConfigTable__isset __isset;

  void __set_id(const int32_t val);

  void __set_speed(const int32_t val);

  void __set_moveExpend(const int32_t val);

  void __set_maxHp(const int32_t val);

  void __set_deathTime(const int32_t val);

  void __set_maxMp(const int32_t val);

  void __set_maxInk(const int32_t val);

  void __set_inkRecover(const int32_t val);

  void __set_maxBoom(const int32_t val);

  void __set_attackedIntervalTime(const int32_t val);

  void __set_score(const int32_t val);

  void __set_category(const int32_t val);

  void __set_comPrefab(const std::string& val);

  void __set_syncHpKey(const int32_t val);

  void __set_syncMpKey(const int32_t val);

  void __set_syncDecelerationKey(const int32_t val);

  void __set_syncRedScoreKey(const int32_t val);

  void __set_syncBlueScoreKey(const int32_t val);

  void __set_syncGreenScoreKey(const int32_t val);

  void __set_syncCountDownKey(const int32_t val);

  void __set_syncEnergyOutputKey(const int32_t val);

  void __set_syncRebirthTime(const int32_t val);

  void __set_syncBaseCampState(const int32_t val);

  void __set_syncAttackerKey(const int32_t val);

  bool operator == (const PlayerConfigTable & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(speed == rhs.speed))
      return false;
    if (!(moveExpend == rhs.moveExpend))
      return false;
    if (!(maxHp == rhs.maxHp))
      return false;
    if (!(deathTime == rhs.deathTime))
      return false;
    if (!(maxMp == rhs.maxMp))
      return false;
    if (!(maxInk == rhs.maxInk))
      return false;
    if (!(inkRecover == rhs.inkRecover))
      return false;
    if (!(maxBoom == rhs.maxBoom))
      return false;
    if (!(attackedIntervalTime == rhs.attackedIntervalTime))
      return false;
    if (!(score == rhs.score))
      return false;
    if (!(category == rhs.category))
      return false;
    if (!(comPrefab == rhs.comPrefab))
      return false;
    if (!(syncHpKey == rhs.syncHpKey))
      return false;
    if (!(syncMpKey == rhs.syncMpKey))
      return false;
    if (!(syncDecelerationKey == rhs.syncDecelerationKey))
      return false;
    if (!(syncRedScoreKey == rhs.syncRedScoreKey))
      return false;
    if (!(syncBlueScoreKey == rhs.syncBlueScoreKey))
      return false;
    if (!(syncGreenScoreKey == rhs.syncGreenScoreKey))
      return false;
    if (!(syncCountDownKey == rhs.syncCountDownKey))
      return false;
    if (!(syncEnergyOutputKey == rhs.syncEnergyOutputKey))
      return false;
    if (!(syncRebirthTime == rhs.syncRebirthTime))
      return false;
    if (!(syncBaseCampState == rhs.syncBaseCampState))
      return false;
    if (!(syncAttackerKey == rhs.syncAttackerKey))
      return false;
    return true;
  }
  bool operator != (const PlayerConfigTable &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlayerConfigTable & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PlayerConfigTable &a, PlayerConfigTable &b);

inline std::ostream& operator<<(std::ostream& out, const PlayerConfigTable& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _LineSelfConfigTable__isset {
  _LineSelfConfigTable__isset() : delayTime(false), deathUnit(false), cutUnit(false), lineRadius(false), pointDistance(false), captureMinTime(false), captureMinRadius(false), captureMaxTime(false), captureMaxRadius(false), attenRadio(false), bufferTime(false), decelerate(false), expend(false) {}
  bool delayTime :1;
  bool deathUnit :1;
  bool cutUnit :1;
  bool lineRadius :1;
  bool pointDistance :1;
  bool captureMinTime :1;
  bool captureMinRadius :1;
  bool captureMaxTime :1;
  bool captureMaxRadius :1;
  bool attenRadio :1;
  bool bufferTime :1;
  bool decelerate :1;
  bool expend :1;
} _LineSelfConfigTable__isset;

class LineSelfConfigTable : public virtual ::apache::thrift::TBase {
 public:

  LineSelfConfigTable(const LineSelfConfigTable&);
  LineSelfConfigTable& operator=(const LineSelfConfigTable&);
  LineSelfConfigTable() : delayTime(0), deathUnit(0), cutUnit(0), lineRadius(0), pointDistance(0), captureMinTime(0), captureMinRadius(0), captureMaxTime(0), captureMaxRadius(0), attenRadio(0), bufferTime(0), decelerate(0), expend(0) {
  }

  virtual ~LineSelfConfigTable() throw();
  double delayTime;
  int32_t deathUnit;
  int32_t cutUnit;
  double lineRadius;
  double pointDistance;
  double captureMinTime;
  double captureMinRadius;
  double captureMaxTime;
  double captureMaxRadius;
  double attenRadio;
  double bufferTime;
  double decelerate;
  int32_t expend;

  _LineSelfConfigTable__isset __isset;

  void __set_delayTime(const double val);

  void __set_deathUnit(const int32_t val);

  void __set_cutUnit(const int32_t val);

  void __set_lineRadius(const double val);

  void __set_pointDistance(const double val);

  void __set_captureMinTime(const double val);

  void __set_captureMinRadius(const double val);

  void __set_captureMaxTime(const double val);

  void __set_captureMaxRadius(const double val);

  void __set_attenRadio(const double val);

  void __set_bufferTime(const double val);

  void __set_decelerate(const double val);

  void __set_expend(const int32_t val);

  bool operator == (const LineSelfConfigTable & rhs) const
  {
    if (!(delayTime == rhs.delayTime))
      return false;
    if (!(deathUnit == rhs.deathUnit))
      return false;
    if (!(cutUnit == rhs.cutUnit))
      return false;
    if (!(lineRadius == rhs.lineRadius))
      return false;
    if (!(pointDistance == rhs.pointDistance))
      return false;
    if (!(captureMinTime == rhs.captureMinTime))
      return false;
    if (!(captureMinRadius == rhs.captureMinRadius))
      return false;
    if (!(captureMaxTime == rhs.captureMaxTime))
      return false;
    if (!(captureMaxRadius == rhs.captureMaxRadius))
      return false;
    if (!(attenRadio == rhs.attenRadio))
      return false;
    if (!(bufferTime == rhs.bufferTime))
      return false;
    if (!(decelerate == rhs.decelerate))
      return false;
    if (!(expend == rhs.expend))
      return false;
    return true;
  }
  bool operator != (const LineSelfConfigTable &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LineSelfConfigTable & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LineSelfConfigTable &a, LineSelfConfigTable &b);

inline std::ostream& operator<<(std::ostream& out, const LineSelfConfigTable& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _EnergyOutputConfig__isset {
  _EnergyOutputConfig__isset() : id(false), energy(false) {}
  bool id :1;
  bool energy :1;
} _EnergyOutputConfig__isset;

class EnergyOutputConfig : public virtual ::apache::thrift::TBase {
 public:

  EnergyOutputConfig(const EnergyOutputConfig&);
  EnergyOutputConfig& operator=(const EnergyOutputConfig&);
  EnergyOutputConfig() : id(0), energy(0) {
  }

  virtual ~EnergyOutputConfig() throw();
  int32_t id;
  int32_t energy;

  _EnergyOutputConfig__isset __isset;

  void __set_id(const int32_t val);

  void __set_energy(const int32_t val);

  bool operator == (const EnergyOutputConfig & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(energy == rhs.energy))
      return false;
    return true;
  }
  bool operator != (const EnergyOutputConfig &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EnergyOutputConfig & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(EnergyOutputConfig &a, EnergyOutputConfig &b);

inline std::ostream& operator<<(std::ostream& out, const EnergyOutputConfig& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _EnergyOutputConfigTable__isset {
  _EnergyOutputConfigTable__isset() : energyConfigMap(false) {}
  bool energyConfigMap :1;
} _EnergyOutputConfigTable__isset;

class EnergyOutputConfigTable : public virtual ::apache::thrift::TBase {
 public:

  EnergyOutputConfigTable(const EnergyOutputConfigTable&);
  EnergyOutputConfigTable& operator=(const EnergyOutputConfigTable&);
  EnergyOutputConfigTable() {
  }

  virtual ~EnergyOutputConfigTable() throw();
  std::map<int32_t, EnergyOutputConfig>  energyConfigMap;

  _EnergyOutputConfigTable__isset __isset;

  void __set_energyConfigMap(const std::map<int32_t, EnergyOutputConfig> & val);

  bool operator == (const EnergyOutputConfigTable & rhs) const
  {
    if (!(energyConfigMap == rhs.energyConfigMap))
      return false;
    return true;
  }
  bool operator != (const EnergyOutputConfigTable &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EnergyOutputConfigTable & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(EnergyOutputConfigTable &a, EnergyOutputConfigTable &b);

inline std::ostream& operator<<(std::ostream& out, const EnergyOutputConfigTable& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _TriggerConfig__isset {
  _TriggerConfig__isset() : id(false), name(false), type(false), assetBundle(false), sourceName(false), bonusStrategy(false) {}
  bool id :1;
  bool name :1;
  bool type :1;
  bool assetBundle :1;
  bool sourceName :1;
  bool bonusStrategy :1;
} _TriggerConfig__isset;

class TriggerConfig : public virtual ::apache::thrift::TBase {
 public:

  TriggerConfig(const TriggerConfig&);
  TriggerConfig& operator=(const TriggerConfig&);
  TriggerConfig() : id(0), name(), type(0), assetBundle(), sourceName(), bonusStrategy(0) {
  }

  virtual ~TriggerConfig() throw();
  int32_t id;
  std::string name;
  int32_t type;
  std::string assetBundle;
  std::string sourceName;
  int32_t bonusStrategy;

  _TriggerConfig__isset __isset;

  void __set_id(const int32_t val);

  void __set_name(const std::string& val);

  void __set_type(const int32_t val);

  void __set_assetBundle(const std::string& val);

  void __set_sourceName(const std::string& val);

  void __set_bonusStrategy(const int32_t val);

  bool operator == (const TriggerConfig & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(assetBundle == rhs.assetBundle))
      return false;
    if (!(sourceName == rhs.sourceName))
      return false;
    if (!(bonusStrategy == rhs.bonusStrategy))
      return false;
    return true;
  }
  bool operator != (const TriggerConfig &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TriggerConfig & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TriggerConfig &a, TriggerConfig &b);

inline std::ostream& operator<<(std::ostream& out, const TriggerConfig& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _TriggerConfigTable__isset {
  _TriggerConfigTable__isset() : triggerConfigMap(false) {}
  bool triggerConfigMap :1;
} _TriggerConfigTable__isset;

class TriggerConfigTable : public virtual ::apache::thrift::TBase {
 public:

  TriggerConfigTable(const TriggerConfigTable&);
  TriggerConfigTable& operator=(const TriggerConfigTable&);
  TriggerConfigTable() {
  }

  virtual ~TriggerConfigTable() throw();
  std::map<int32_t, TriggerConfig>  triggerConfigMap;

  _TriggerConfigTable__isset __isset;

  void __set_triggerConfigMap(const std::map<int32_t, TriggerConfig> & val);

  bool operator == (const TriggerConfigTable & rhs) const
  {
    if (!(triggerConfigMap == rhs.triggerConfigMap))
      return false;
    return true;
  }
  bool operator != (const TriggerConfigTable &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TriggerConfigTable & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TriggerConfigTable &a, TriggerConfigTable &b);

inline std::ostream& operator<<(std::ostream& out, const TriggerConfigTable& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _BulletConfig__isset {
  _BulletConfig__isset() : id(false), name(false), category(false), comPrefab(false), atk(false), sourceName(false), attackShipEffect(false), noramlEffect(false), normalSpeed(false), speedInLine(false), shootOnceIntervalTime(false), shootMoreIntervalTime(false), offsetByOther(false), lifeCycle(false) {}
  bool id :1;
  bool name :1;
  bool category :1;
  bool comPrefab :1;
  bool atk :1;
  bool sourceName :1;
  bool attackShipEffect :1;
  bool noramlEffect :1;
  bool normalSpeed :1;
  bool speedInLine :1;
  bool shootOnceIntervalTime :1;
  bool shootMoreIntervalTime :1;
  bool offsetByOther :1;
  bool lifeCycle :1;
} _BulletConfig__isset;

class BulletConfig : public virtual ::apache::thrift::TBase {
 public:

  BulletConfig(const BulletConfig&);
  BulletConfig& operator=(const BulletConfig&);
  BulletConfig() : id(0), name(), category(0), comPrefab(), atk(0), sourceName(), attackShipEffect(), noramlEffect(), normalSpeed(0), speedInLine(0), shootOnceIntervalTime(0), shootMoreIntervalTime(0), offsetByOther(0), lifeCycle(0) {
  }

  virtual ~BulletConfig() throw();
  int32_t id;
  std::string name;
  int32_t category;
  std::string comPrefab;
  int32_t atk;
  std::string sourceName;
  std::string attackShipEffect;
  std::string noramlEffect;
  double normalSpeed;
  double speedInLine;
  double shootOnceIntervalTime;
  double shootMoreIntervalTime;
  bool offsetByOther;
  int32_t lifeCycle;

  _BulletConfig__isset __isset;

  void __set_id(const int32_t val);

  void __set_name(const std::string& val);

  void __set_category(const int32_t val);

  void __set_comPrefab(const std::string& val);

  void __set_atk(const int32_t val);

  void __set_sourceName(const std::string& val);

  void __set_attackShipEffect(const std::string& val);

  void __set_noramlEffect(const std::string& val);

  void __set_normalSpeed(const double val);

  void __set_speedInLine(const double val);

  void __set_shootOnceIntervalTime(const double val);

  void __set_shootMoreIntervalTime(const double val);

  void __set_offsetByOther(const bool val);

  void __set_lifeCycle(const int32_t val);

  bool operator == (const BulletConfig & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(category == rhs.category))
      return false;
    if (!(comPrefab == rhs.comPrefab))
      return false;
    if (!(atk == rhs.atk))
      return false;
    if (!(sourceName == rhs.sourceName))
      return false;
    if (!(attackShipEffect == rhs.attackShipEffect))
      return false;
    if (!(noramlEffect == rhs.noramlEffect))
      return false;
    if (!(normalSpeed == rhs.normalSpeed))
      return false;
    if (!(speedInLine == rhs.speedInLine))
      return false;
    if (!(shootOnceIntervalTime == rhs.shootOnceIntervalTime))
      return false;
    if (!(shootMoreIntervalTime == rhs.shootMoreIntervalTime))
      return false;
    if (!(offsetByOther == rhs.offsetByOther))
      return false;
    if (!(lifeCycle == rhs.lifeCycle))
      return false;
    return true;
  }
  bool operator != (const BulletConfig &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BulletConfig & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BulletConfig &a, BulletConfig &b);

inline std::ostream& operator<<(std::ostream& out, const BulletConfig& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _BulletConfigTable__isset {
  _BulletConfigTable__isset() : bulletConfigMap(false) {}
  bool bulletConfigMap :1;
} _BulletConfigTable__isset;

class BulletConfigTable : public virtual ::apache::thrift::TBase {
 public:

  BulletConfigTable(const BulletConfigTable&);
  BulletConfigTable& operator=(const BulletConfigTable&);
  BulletConfigTable() {
  }

  virtual ~BulletConfigTable() throw();
  std::map<int32_t, BulletConfig>  bulletConfigMap;

  _BulletConfigTable__isset __isset;

  void __set_bulletConfigMap(const std::map<int32_t, BulletConfig> & val);

  bool operator == (const BulletConfigTable & rhs) const
  {
    if (!(bulletConfigMap == rhs.bulletConfigMap))
      return false;
    return true;
  }
  bool operator != (const BulletConfigTable &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BulletConfigTable & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BulletConfigTable &a, BulletConfigTable &b);

inline std::ostream& operator<<(std::ostream& out, const BulletConfigTable& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _NPCConfig__isset {
  _NPCConfig__isset() : id(false), name(false), category(false), comPrefab(false), sourceName(false), maxHp(false), defence(false), attack(false), attackFrequency(false), attackRadius(false), normalSpeed(false), normalRadius(false), chaseSpeed(false), escapeSpeed(false), tourSpeed(false), tourRadius(false), backRadius(false), backSpeed(false), score(false), dropId(false), deathTime(false), dropRate(false), dropType(false), norRenLv(false) {}
  bool id :1;
  bool name :1;
  bool category :1;
  bool comPrefab :1;
  bool sourceName :1;
  bool maxHp :1;
  bool defence :1;
  bool attack :1;
  bool attackFrequency :1;
  bool attackRadius :1;
  bool normalSpeed :1;
  bool normalRadius :1;
  bool chaseSpeed :1;
  bool escapeSpeed :1;
  bool tourSpeed :1;
  bool tourRadius :1;
  bool backRadius :1;
  bool backSpeed :1;
  bool score :1;
  bool dropId :1;
  bool deathTime :1;
  bool dropRate :1;
  bool dropType :1;
  bool norRenLv :1;
} _NPCConfig__isset;

class NPCConfig : public virtual ::apache::thrift::TBase {
 public:

  NPCConfig(const NPCConfig&);
  NPCConfig& operator=(const NPCConfig&);
  NPCConfig() : id(0), name(), category(0), comPrefab(), sourceName(), maxHp(0), defence(0), attack(0), attackFrequency(0), attackRadius(0), normalSpeed(0), normalRadius(0), chaseSpeed(0), escapeSpeed(0), tourSpeed(0), tourRadius(0), backRadius(0), backSpeed(0), score(0), dropId(0), deathTime(0), dropRate(0), dropType(0), norRenLv(0) {
  }

  virtual ~NPCConfig() throw();
  int32_t id;
  std::string name;
  int32_t category;
  std::string comPrefab;
  std::string sourceName;
  int32_t maxHp;
  int32_t defence;
  int32_t attack;
  int32_t attackFrequency;
  int32_t attackRadius;
  int32_t normalSpeed;
  int32_t normalRadius;
  int32_t chaseSpeed;
  int32_t escapeSpeed;
  int32_t tourSpeed;
  int32_t tourRadius;
  int32_t backRadius;
  int32_t backSpeed;
  int32_t score;
  int32_t dropId;
  int32_t deathTime;
  int32_t dropRate;
  int32_t dropType;
  int32_t norRenLv;

  _NPCConfig__isset __isset;

  void __set_id(const int32_t val);

  void __set_name(const std::string& val);

  void __set_category(const int32_t val);

  void __set_comPrefab(const std::string& val);

  void __set_sourceName(const std::string& val);

  void __set_maxHp(const int32_t val);

  void __set_defence(const int32_t val);

  void __set_attack(const int32_t val);

  void __set_attackFrequency(const int32_t val);

  void __set_attackRadius(const int32_t val);

  void __set_normalSpeed(const int32_t val);

  void __set_normalRadius(const int32_t val);

  void __set_chaseSpeed(const int32_t val);

  void __set_escapeSpeed(const int32_t val);

  void __set_tourSpeed(const int32_t val);

  void __set_tourRadius(const int32_t val);

  void __set_backRadius(const int32_t val);

  void __set_backSpeed(const int32_t val);

  void __set_score(const int32_t val);

  void __set_dropId(const int32_t val);

  void __set_deathTime(const int32_t val);

  void __set_dropRate(const int32_t val);

  void __set_dropType(const int32_t val);

  void __set_norRenLv(const int32_t val);

  bool operator == (const NPCConfig & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(category == rhs.category))
      return false;
    if (!(comPrefab == rhs.comPrefab))
      return false;
    if (!(sourceName == rhs.sourceName))
      return false;
    if (!(maxHp == rhs.maxHp))
      return false;
    if (!(defence == rhs.defence))
      return false;
    if (!(attack == rhs.attack))
      return false;
    if (!(attackFrequency == rhs.attackFrequency))
      return false;
    if (!(attackRadius == rhs.attackRadius))
      return false;
    if (!(normalSpeed == rhs.normalSpeed))
      return false;
    if (!(normalRadius == rhs.normalRadius))
      return false;
    if (!(chaseSpeed == rhs.chaseSpeed))
      return false;
    if (!(escapeSpeed == rhs.escapeSpeed))
      return false;
    if (!(tourSpeed == rhs.tourSpeed))
      return false;
    if (!(tourRadius == rhs.tourRadius))
      return false;
    if (!(backRadius == rhs.backRadius))
      return false;
    if (!(backSpeed == rhs.backSpeed))
      return false;
    if (!(score == rhs.score))
      return false;
    if (!(dropId == rhs.dropId))
      return false;
    if (!(deathTime == rhs.deathTime))
      return false;
    if (!(dropRate == rhs.dropRate))
      return false;
    if (!(dropType == rhs.dropType))
      return false;
    if (!(norRenLv == rhs.norRenLv))
      return false;
    return true;
  }
  bool operator != (const NPCConfig &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NPCConfig & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(NPCConfig &a, NPCConfig &b);

inline std::ostream& operator<<(std::ostream& out, const NPCConfig& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _NPCConfigTable__isset {
  _NPCConfigTable__isset() : npcConfigMap(false) {}
  bool npcConfigMap :1;
} _NPCConfigTable__isset;

class NPCConfigTable : public virtual ::apache::thrift::TBase {
 public:

  NPCConfigTable(const NPCConfigTable&);
  NPCConfigTable& operator=(const NPCConfigTable&);
  NPCConfigTable() {
  }

  virtual ~NPCConfigTable() throw();
  std::map<int32_t, NPCConfig>  npcConfigMap;

  _NPCConfigTable__isset __isset;

  void __set_npcConfigMap(const std::map<int32_t, NPCConfig> & val);

  bool operator == (const NPCConfigTable & rhs) const
  {
    if (!(npcConfigMap == rhs.npcConfigMap))
      return false;
    return true;
  }
  bool operator != (const NPCConfigTable &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NPCConfigTable & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(NPCConfigTable &a, NPCConfigTable &b);

inline std::ostream& operator<<(std::ostream& out, const NPCConfigTable& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SoundPath__isset {
  _SoundPath__isset() : type(false), path(false) {}
  bool type :1;
  bool path :1;
} _SoundPath__isset;

class SoundPath : public virtual ::apache::thrift::TBase {
 public:

  SoundPath(const SoundPath&);
  SoundPath& operator=(const SoundPath&);
  SoundPath() : type(), path() {
  }

  virtual ~SoundPath() throw();
  std::string type;
  std::string path;

  _SoundPath__isset __isset;

  void __set_type(const std::string& val);

  void __set_path(const std::string& val);

  bool operator == (const SoundPath & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const SoundPath &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SoundPath & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SoundPath &a, SoundPath &b);

inline std::ostream& operator<<(std::ostream& out, const SoundPath& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SoundPathMap__isset {
  _SoundPathMap__isset() : soundPathMap(false) {}
  bool soundPathMap :1;
} _SoundPathMap__isset;

class SoundPathMap : public virtual ::apache::thrift::TBase {
 public:

  SoundPathMap(const SoundPathMap&);
  SoundPathMap& operator=(const SoundPathMap&);
  SoundPathMap() {
  }

  virtual ~SoundPathMap() throw();
  std::map<std::string, SoundPath>  soundPathMap;

  _SoundPathMap__isset __isset;

  void __set_soundPathMap(const std::map<std::string, SoundPath> & val);

  bool operator == (const SoundPathMap & rhs) const
  {
    if (!(soundPathMap == rhs.soundPathMap))
      return false;
    return true;
  }
  bool operator != (const SoundPathMap &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SoundPathMap & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SoundPathMap &a, SoundPathMap &b);

inline std::ostream& operator<<(std::ostream& out, const SoundPathMap& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _BattleItemConfig__isset {
  _BattleItemConfig__isset() : id(false), resource(false), limitId(false), funcId(false), dieEffect(false), category(false), comPrefab(false), lifeCycle(false), triggerValidity(false), renderLevel(false) {}
  bool id :1;
  bool resource :1;
  bool limitId :1;
  bool funcId :1;
  bool dieEffect :1;
  bool category :1;
  bool comPrefab :1;
  bool lifeCycle :1;
  bool triggerValidity :1;
  bool renderLevel :1;
} _BattleItemConfig__isset;

class BattleItemConfig : public virtual ::apache::thrift::TBase {
 public:

  BattleItemConfig(const BattleItemConfig&);
  BattleItemConfig& operator=(const BattleItemConfig&);
  BattleItemConfig() : id(0), resource(), limitId(0), funcId(0), dieEffect(), category(0), comPrefab(), lifeCycle(0), triggerValidity(0), renderLevel(0) {
  }

  virtual ~BattleItemConfig() throw();
  int32_t id;
  std::string resource;
  int32_t limitId;
  int32_t funcId;
  std::string dieEffect;
  int32_t category;
  std::string comPrefab;
  int32_t lifeCycle;
  bool triggerValidity;
  int32_t renderLevel;

  _BattleItemConfig__isset __isset;

  void __set_id(const int32_t val);

  void __set_resource(const std::string& val);

  void __set_limitId(const int32_t val);

  void __set_funcId(const int32_t val);

  void __set_dieEffect(const std::string& val);

  void __set_category(const int32_t val);

  void __set_comPrefab(const std::string& val);

  void __set_lifeCycle(const int32_t val);

  void __set_triggerValidity(const bool val);

  void __set_renderLevel(const int32_t val);

  bool operator == (const BattleItemConfig & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(resource == rhs.resource))
      return false;
    if (!(limitId == rhs.limitId))
      return false;
    if (!(funcId == rhs.funcId))
      return false;
    if (!(dieEffect == rhs.dieEffect))
      return false;
    if (!(category == rhs.category))
      return false;
    if (!(comPrefab == rhs.comPrefab))
      return false;
    if (!(lifeCycle == rhs.lifeCycle))
      return false;
    if (!(triggerValidity == rhs.triggerValidity))
      return false;
    if (!(renderLevel == rhs.renderLevel))
      return false;
    return true;
  }
  bool operator != (const BattleItemConfig &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BattleItemConfig & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BattleItemConfig &a, BattleItemConfig &b);

inline std::ostream& operator<<(std::ostream& out, const BattleItemConfig& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _BattleItemConfigTable__isset {
  _BattleItemConfigTable__isset() : itemConfigMap(false) {}
  bool itemConfigMap :1;
} _BattleItemConfigTable__isset;

class BattleItemConfigTable : public virtual ::apache::thrift::TBase {
 public:

  BattleItemConfigTable(const BattleItemConfigTable&);
  BattleItemConfigTable& operator=(const BattleItemConfigTable&);
  BattleItemConfigTable() {
  }

  virtual ~BattleItemConfigTable() throw();
  std::map<int32_t, BattleItemConfig>  itemConfigMap;

  _BattleItemConfigTable__isset __isset;

  void __set_itemConfigMap(const std::map<int32_t, BattleItemConfig> & val);

  bool operator == (const BattleItemConfigTable & rhs) const
  {
    if (!(itemConfigMap == rhs.itemConfigMap))
      return false;
    return true;
  }
  bool operator != (const BattleItemConfigTable &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BattleItemConfigTable & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BattleItemConfigTable &a, BattleItemConfigTable &b);

inline std::ostream& operator<<(std::ostream& out, const BattleItemConfigTable& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _DropItem__isset {
  _DropItem__isset() : itemId(false), minCount(false), maxCount(false), weight(false) {}
  bool itemId :1;
  bool minCount :1;
  bool maxCount :1;
  bool weight :1;
} _DropItem__isset;

class DropItem : public virtual ::apache::thrift::TBase {
 public:

  DropItem(const DropItem&);
  DropItem& operator=(const DropItem&);
  DropItem() : itemId(0), minCount(0), maxCount(0), weight(0) {
  }

  virtual ~DropItem() throw();
  int32_t itemId;
  int32_t minCount;
  int32_t maxCount;
  int32_t weight;

  _DropItem__isset __isset;

  void __set_itemId(const int32_t val);

  void __set_minCount(const int32_t val);

  void __set_maxCount(const int32_t val);

  void __set_weight(const int32_t val);

  bool operator == (const DropItem & rhs) const
  {
    if (!(itemId == rhs.itemId))
      return false;
    if (!(minCount == rhs.minCount))
      return false;
    if (!(maxCount == rhs.maxCount))
      return false;
    if (!(weight == rhs.weight))
      return false;
    return true;
  }
  bool operator != (const DropItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DropItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DropItem &a, DropItem &b);

inline std::ostream& operator<<(std::ostream& out, const DropItem& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _DropListConfig__isset {
  _DropListConfig__isset() : dropListId(false), dropItemList(false) {}
  bool dropListId :1;
  bool dropItemList :1;
} _DropListConfig__isset;

class DropListConfig : public virtual ::apache::thrift::TBase {
 public:

  DropListConfig(const DropListConfig&);
  DropListConfig& operator=(const DropListConfig&);
  DropListConfig() : dropListId(0) {
  }

  virtual ~DropListConfig() throw();
  int32_t dropListId;
  std::vector<DropItem>  dropItemList;

  _DropListConfig__isset __isset;

  void __set_dropListId(const int32_t val);

  void __set_dropItemList(const std::vector<DropItem> & val);

  bool operator == (const DropListConfig & rhs) const
  {
    if (!(dropListId == rhs.dropListId))
      return false;
    if (!(dropItemList == rhs.dropItemList))
      return false;
    return true;
  }
  bool operator != (const DropListConfig &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DropListConfig & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DropListConfig &a, DropListConfig &b);

inline std::ostream& operator<<(std::ostream& out, const DropListConfig& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _DropListConfigTable__isset {
  _DropListConfigTable__isset() : dropListConfigMap(false) {}
  bool dropListConfigMap :1;
} _DropListConfigTable__isset;

class DropListConfigTable : public virtual ::apache::thrift::TBase {
 public:

  DropListConfigTable(const DropListConfigTable&);
  DropListConfigTable& operator=(const DropListConfigTable&);
  DropListConfigTable() {
  }

  virtual ~DropListConfigTable() throw();
  std::map<int32_t, DropListConfig>  dropListConfigMap;

  _DropListConfigTable__isset __isset;

  void __set_dropListConfigMap(const std::map<int32_t, DropListConfig> & val);

  bool operator == (const DropListConfigTable & rhs) const
  {
    if (!(dropListConfigMap == rhs.dropListConfigMap))
      return false;
    return true;
  }
  bool operator != (const DropListConfigTable &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DropListConfigTable & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DropListConfigTable &a, DropListConfigTable &b);

inline std::ostream& operator<<(std::ostream& out, const DropListConfigTable& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _VersionConfig__isset {
  _VersionConfig__isset() : name(false) {}
  bool name :1;
} _VersionConfig__isset;

class VersionConfig : public virtual ::apache::thrift::TBase {
 public:

  VersionConfig(const VersionConfig&);
  VersionConfig& operator=(const VersionConfig&);
  VersionConfig() : name() {
  }

  virtual ~VersionConfig() throw();
  std::string name;

  _VersionConfig__isset __isset;

  void __set_name(const std::string& val);

  bool operator == (const VersionConfig & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const VersionConfig &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VersionConfig & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(VersionConfig &a, VersionConfig &b);

inline std::ostream& operator<<(std::ostream& out, const VersionConfig& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _LimitData__isset {
  _LimitData__isset() : id(false), oper(false), messageId(false), target(false), paramStringList(false), paramIntList(false) {}
  bool id :1;
  bool oper :1;
  bool messageId :1;
  bool target :1;
  bool paramStringList :1;
  bool paramIntList :1;
} _LimitData__isset;

class LimitData : public virtual ::apache::thrift::TBase {
 public:

  LimitData(const LimitData&);
  LimitData& operator=(const LimitData&);
  LimitData() : id(0), oper(0), messageId(0), target(0) {
  }

  virtual ~LimitData() throw();
  int32_t id;
  int8_t oper;
  int32_t messageId;
  int8_t target;
  std::vector<std::string>  paramStringList;
  std::vector<int32_t>  paramIntList;

  _LimitData__isset __isset;

  void __set_id(const int32_t val);

  void __set_oper(const int8_t val);

  void __set_messageId(const int32_t val);

  void __set_target(const int8_t val);

  void __set_paramStringList(const std::vector<std::string> & val);

  void __set_paramIntList(const std::vector<int32_t> & val);

  bool operator == (const LimitData & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(oper == rhs.oper))
      return false;
    if (!(messageId == rhs.messageId))
      return false;
    if (!(target == rhs.target))
      return false;
    if (!(paramStringList == rhs.paramStringList))
      return false;
    if (!(paramIntList == rhs.paramIntList))
      return false;
    return true;
  }
  bool operator != (const LimitData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LimitData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LimitData &a, LimitData &b);

inline std::ostream& operator<<(std::ostream& out, const LimitData& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _LimitGroup__isset {
  _LimitGroup__isset() : id(false), logic(false), limitDataList(false) {}
  bool id :1;
  bool logic :1;
  bool limitDataList :1;
} _LimitGroup__isset;

class LimitGroup : public virtual ::apache::thrift::TBase {
 public:

  LimitGroup(const LimitGroup&);
  LimitGroup& operator=(const LimitGroup&);
  LimitGroup() : id(0), logic(0) {
  }

  virtual ~LimitGroup() throw();
  int32_t id;
  int8_t logic;
  std::vector<LimitData>  limitDataList;

  _LimitGroup__isset __isset;

  void __set_id(const int32_t val);

  void __set_logic(const int8_t val);

  void __set_limitDataList(const std::vector<LimitData> & val);

  bool operator == (const LimitGroup & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(logic == rhs.logic))
      return false;
    if (!(limitDataList == rhs.limitDataList))
      return false;
    return true;
  }
  bool operator != (const LimitGroup &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LimitGroup & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LimitGroup &a, LimitGroup &b);

inline std::ostream& operator<<(std::ostream& out, const LimitGroup& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _FuncData__isset {
  _FuncData__isset() : id(false), oper(false), target(false), paramStringList(false), paramIntList(false) {}
  bool id :1;
  bool oper :1;
  bool target :1;
  bool paramStringList :1;
  bool paramIntList :1;
} _FuncData__isset;

class FuncData : public virtual ::apache::thrift::TBase {
 public:

  FuncData(const FuncData&);
  FuncData& operator=(const FuncData&);
  FuncData() : id(0), oper(0), target(0) {
  }

  virtual ~FuncData() throw();
  int32_t id;
  int8_t oper;
  int8_t target;
  std::vector<std::string>  paramStringList;
  std::vector<int32_t>  paramIntList;

  _FuncData__isset __isset;

  void __set_id(const int32_t val);

  void __set_oper(const int8_t val);

  void __set_target(const int8_t val);

  void __set_paramStringList(const std::vector<std::string> & val);

  void __set_paramIntList(const std::vector<int32_t> & val);

  bool operator == (const FuncData & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(oper == rhs.oper))
      return false;
    if (!(target == rhs.target))
      return false;
    if (!(paramStringList == rhs.paramStringList))
      return false;
    if (!(paramIntList == rhs.paramIntList))
      return false;
    return true;
  }
  bool operator != (const FuncData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FuncData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(FuncData &a, FuncData &b);

inline std::ostream& operator<<(std::ostream& out, const FuncData& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _FuncGroup__isset {
  _FuncGroup__isset() : id(false), funcDataList(false) {}
  bool id :1;
  bool funcDataList :1;
} _FuncGroup__isset;

class FuncGroup : public virtual ::apache::thrift::TBase {
 public:

  FuncGroup(const FuncGroup&);
  FuncGroup& operator=(const FuncGroup&);
  FuncGroup() : id(0) {
  }

  virtual ~FuncGroup() throw();
  int32_t id;
  std::vector<FuncData>  funcDataList;

  _FuncGroup__isset __isset;

  void __set_id(const int32_t val);

  void __set_funcDataList(const std::vector<FuncData> & val);

  bool operator == (const FuncGroup & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(funcDataList == rhs.funcDataList))
      return false;
    return true;
  }
  bool operator != (const FuncGroup &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FuncGroup & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(FuncGroup &a, FuncGroup &b);

inline std::ostream& operator<<(std::ostream& out, const FuncGroup& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _TargetData__isset {
  _TargetData__isset() : targetId(false), paramStringList(false), paramIntList(false) {}
  bool targetId :1;
  bool paramStringList :1;
  bool paramIntList :1;
} _TargetData__isset;

class TargetData : public virtual ::apache::thrift::TBase {
 public:

  TargetData(const TargetData&);
  TargetData& operator=(const TargetData&);
  TargetData() : targetId(0) {
  }

  virtual ~TargetData() throw();
  int32_t targetId;
  std::vector<std::string>  paramStringList;
  std::vector<int32_t>  paramIntList;

  _TargetData__isset __isset;

  void __set_targetId(const int32_t val);

  void __set_paramStringList(const std::vector<std::string> & val);

  void __set_paramIntList(const std::vector<int32_t> & val);

  bool operator == (const TargetData & rhs) const
  {
    if (!(targetId == rhs.targetId))
      return false;
    if (!(paramStringList == rhs.paramStringList))
      return false;
    if (!(paramIntList == rhs.paramIntList))
      return false;
    return true;
  }
  bool operator != (const TargetData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TargetData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TargetData &a, TargetData &b);

inline std::ostream& operator<<(std::ostream& out, const TargetData& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _TargetGroup__isset {
  _TargetGroup__isset() : id(false), targetDataList(false) {}
  bool id :1;
  bool targetDataList :1;
} _TargetGroup__isset;

class TargetGroup : public virtual ::apache::thrift::TBase {
 public:

  TargetGroup(const TargetGroup&);
  TargetGroup& operator=(const TargetGroup&);
  TargetGroup() : id(0) {
  }

  virtual ~TargetGroup() throw();
  int32_t id;
  std::vector<TargetData>  targetDataList;

  _TargetGroup__isset __isset;

  void __set_id(const int32_t val);

  void __set_targetDataList(const std::vector<TargetData> & val);

  bool operator == (const TargetGroup & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(targetDataList == rhs.targetDataList))
      return false;
    return true;
  }
  bool operator != (const TargetGroup &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TargetGroup & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TargetGroup &a, TargetGroup &b);

inline std::ostream& operator<<(std::ostream& out, const TargetGroup& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _LimitFuncSceneConfig__isset {
  _LimitFuncSceneConfig__isset() : limitId(false), funcId(false), targetId(false) {}
  bool limitId :1;
  bool funcId :1;
  bool targetId :1;
} _LimitFuncSceneConfig__isset;

class LimitFuncSceneConfig : public virtual ::apache::thrift::TBase {
 public:

  LimitFuncSceneConfig(const LimitFuncSceneConfig&);
  LimitFuncSceneConfig& operator=(const LimitFuncSceneConfig&);
  LimitFuncSceneConfig() : limitId(0), funcId(0), targetId(0) {
  }

  virtual ~LimitFuncSceneConfig() throw();
  int32_t limitId;
  int32_t funcId;
  int32_t targetId;

  _LimitFuncSceneConfig__isset __isset;

  void __set_limitId(const int32_t val);

  void __set_funcId(const int32_t val);

  void __set_targetId(const int32_t val);

  bool operator == (const LimitFuncSceneConfig & rhs) const
  {
    if (!(limitId == rhs.limitId))
      return false;
    if (!(funcId == rhs.funcId))
      return false;
    if (!(targetId == rhs.targetId))
      return false;
    return true;
  }
  bool operator != (const LimitFuncSceneConfig &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LimitFuncSceneConfig & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LimitFuncSceneConfig &a, LimitFuncSceneConfig &b);

inline std::ostream& operator<<(std::ostream& out, const LimitFuncSceneConfig& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _LimitConfigTable__isset {
  _LimitConfigTable__isset() : limitMap(false) {}
  bool limitMap :1;
} _LimitConfigTable__isset;

class LimitConfigTable : public virtual ::apache::thrift::TBase {
 public:

  LimitConfigTable(const LimitConfigTable&);
  LimitConfigTable& operator=(const LimitConfigTable&);
  LimitConfigTable() {
  }

  virtual ~LimitConfigTable() throw();
  std::map<int32_t, LimitGroup>  limitMap;

  _LimitConfigTable__isset __isset;

  void __set_limitMap(const std::map<int32_t, LimitGroup> & val);

  bool operator == (const LimitConfigTable & rhs) const
  {
    if (!(limitMap == rhs.limitMap))
      return false;
    return true;
  }
  bool operator != (const LimitConfigTable &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LimitConfigTable & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LimitConfigTable &a, LimitConfigTable &b);

inline std::ostream& operator<<(std::ostream& out, const LimitConfigTable& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _FuncConfigTable__isset {
  _FuncConfigTable__isset() : funcMap(false) {}
  bool funcMap :1;
} _FuncConfigTable__isset;

class FuncConfigTable : public virtual ::apache::thrift::TBase {
 public:

  FuncConfigTable(const FuncConfigTable&);
  FuncConfigTable& operator=(const FuncConfigTable&);
  FuncConfigTable() {
  }

  virtual ~FuncConfigTable() throw();
  std::map<int32_t, FuncGroup>  funcMap;

  _FuncConfigTable__isset __isset;

  void __set_funcMap(const std::map<int32_t, FuncGroup> & val);

  bool operator == (const FuncConfigTable & rhs) const
  {
    if (!(funcMap == rhs.funcMap))
      return false;
    return true;
  }
  bool operator != (const FuncConfigTable &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FuncConfigTable & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(FuncConfigTable &a, FuncConfigTable &b);

inline std::ostream& operator<<(std::ostream& out, const FuncConfigTable& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _TargetConfigTable__isset {
  _TargetConfigTable__isset() : targetMap(false) {}
  bool targetMap :1;
} _TargetConfigTable__isset;

class TargetConfigTable : public virtual ::apache::thrift::TBase {
 public:

  TargetConfigTable(const TargetConfigTable&);
  TargetConfigTable& operator=(const TargetConfigTable&);
  TargetConfigTable() {
  }

  virtual ~TargetConfigTable() throw();
  std::map<int32_t, TargetGroup>  targetMap;

  _TargetConfigTable__isset __isset;

  void __set_targetMap(const std::map<int32_t, TargetGroup> & val);

  bool operator == (const TargetConfigTable & rhs) const
  {
    if (!(targetMap == rhs.targetMap))
      return false;
    return true;
  }
  bool operator != (const TargetConfigTable &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TargetConfigTable & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TargetConfigTable &a, TargetConfigTable &b);

inline std::ostream& operator<<(std::ostream& out, const TargetConfigTable& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _LimitFuncSceneConfigTable__isset {
  _LimitFuncSceneConfigTable__isset() : limitFuncSceneConfigMap(false) {}
  bool limitFuncSceneConfigMap :1;
} _LimitFuncSceneConfigTable__isset;

class LimitFuncSceneConfigTable : public virtual ::apache::thrift::TBase {
 public:

  LimitFuncSceneConfigTable(const LimitFuncSceneConfigTable&);
  LimitFuncSceneConfigTable& operator=(const LimitFuncSceneConfigTable&);
  LimitFuncSceneConfigTable() {
  }

  virtual ~LimitFuncSceneConfigTable() throw();
  std::map<int32_t, std::vector<LimitFuncSceneConfig> >  limitFuncSceneConfigMap;

  _LimitFuncSceneConfigTable__isset __isset;

  void __set_limitFuncSceneConfigMap(const std::map<int32_t, std::vector<LimitFuncSceneConfig> > & val);

  bool operator == (const LimitFuncSceneConfigTable & rhs) const
  {
    if (!(limitFuncSceneConfigMap == rhs.limitFuncSceneConfigMap))
      return false;
    return true;
  }
  bool operator != (const LimitFuncSceneConfigTable &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LimitFuncSceneConfigTable & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(LimitFuncSceneConfigTable &a, LimitFuncSceneConfigTable &b);

inline std::ostream& operator<<(std::ostream& out, const LimitFuncSceneConfigTable& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _BattleBuffConfig__isset {
  _BattleBuffConfig__isset() : id(false), type(false), affectType(false), icon(false), effectResource(false), bindPoint(false), tickTime(false), continueTime(false), addTargetId(false), addLimitId(false), addFuncId(false), tickTargetId(false), tickLimitId(false), tickFuncId(false), delTargetId(false), delLimitId(false), delFuncId(false) {}
  bool id :1;
  bool type :1;
  bool affectType :1;
  bool icon :1;
  bool effectResource :1;
  bool bindPoint :1;
  bool tickTime :1;
  bool continueTime :1;
  bool addTargetId :1;
  bool addLimitId :1;
  bool addFuncId :1;
  bool tickTargetId :1;
  bool tickLimitId :1;
  bool tickFuncId :1;
  bool delTargetId :1;
  bool delLimitId :1;
  bool delFuncId :1;
} _BattleBuffConfig__isset;

class BattleBuffConfig : public virtual ::apache::thrift::TBase {
 public:

  BattleBuffConfig(const BattleBuffConfig&);
  BattleBuffConfig& operator=(const BattleBuffConfig&);
  BattleBuffConfig() : id(0), type(0), affectType(0), icon(), effectResource(), bindPoint(), tickTime(0), continueTime(0), addTargetId(0), addLimitId(0), addFuncId(0), tickTargetId(0), tickLimitId(0), tickFuncId(0), delTargetId(0), delLimitId(0), delFuncId(0) {
  }

  virtual ~BattleBuffConfig() throw();
  int32_t id;
  int32_t type;
  int32_t affectType;
  std::string icon;
  std::string effectResource;
  std::string bindPoint;
  int32_t tickTime;
  int32_t continueTime;
  int32_t addTargetId;
  int32_t addLimitId;
  int32_t addFuncId;
  int32_t tickTargetId;
  int32_t tickLimitId;
  int32_t tickFuncId;
  int32_t delTargetId;
  int32_t delLimitId;
  int32_t delFuncId;

  _BattleBuffConfig__isset __isset;

  void __set_id(const int32_t val);

  void __set_type(const int32_t val);

  void __set_affectType(const int32_t val);

  void __set_icon(const std::string& val);

  void __set_effectResource(const std::string& val);

  void __set_bindPoint(const std::string& val);

  void __set_tickTime(const int32_t val);

  void __set_continueTime(const int32_t val);

  void __set_addTargetId(const int32_t val);

  void __set_addLimitId(const int32_t val);

  void __set_addFuncId(const int32_t val);

  void __set_tickTargetId(const int32_t val);

  void __set_tickLimitId(const int32_t val);

  void __set_tickFuncId(const int32_t val);

  void __set_delTargetId(const int32_t val);

  void __set_delLimitId(const int32_t val);

  void __set_delFuncId(const int32_t val);

  bool operator == (const BattleBuffConfig & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(affectType == rhs.affectType))
      return false;
    if (!(icon == rhs.icon))
      return false;
    if (!(effectResource == rhs.effectResource))
      return false;
    if (!(bindPoint == rhs.bindPoint))
      return false;
    if (!(tickTime == rhs.tickTime))
      return false;
    if (!(continueTime == rhs.continueTime))
      return false;
    if (!(addTargetId == rhs.addTargetId))
      return false;
    if (!(addLimitId == rhs.addLimitId))
      return false;
    if (!(addFuncId == rhs.addFuncId))
      return false;
    if (!(tickTargetId == rhs.tickTargetId))
      return false;
    if (!(tickLimitId == rhs.tickLimitId))
      return false;
    if (!(tickFuncId == rhs.tickFuncId))
      return false;
    if (!(delTargetId == rhs.delTargetId))
      return false;
    if (!(delLimitId == rhs.delLimitId))
      return false;
    if (!(delFuncId == rhs.delFuncId))
      return false;
    return true;
  }
  bool operator != (const BattleBuffConfig &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BattleBuffConfig & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BattleBuffConfig &a, BattleBuffConfig &b);

inline std::ostream& operator<<(std::ostream& out, const BattleBuffConfig& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _BattleBuffConfigTable__isset {
  _BattleBuffConfigTable__isset() : buffConfigMap(false) {}
  bool buffConfigMap :1;
} _BattleBuffConfigTable__isset;

class BattleBuffConfigTable : public virtual ::apache::thrift::TBase {
 public:

  BattleBuffConfigTable(const BattleBuffConfigTable&);
  BattleBuffConfigTable& operator=(const BattleBuffConfigTable&);
  BattleBuffConfigTable() {
  }

  virtual ~BattleBuffConfigTable() throw();
  std::map<int32_t, BattleBuffConfig>  buffConfigMap;

  _BattleBuffConfigTable__isset __isset;

  void __set_buffConfigMap(const std::map<int32_t, BattleBuffConfig> & val);

  bool operator == (const BattleBuffConfigTable & rhs) const
  {
    if (!(buffConfigMap == rhs.buffConfigMap))
      return false;
    return true;
  }
  bool operator != (const BattleBuffConfigTable &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BattleBuffConfigTable & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BattleBuffConfigTable &a, BattleBuffConfigTable &b);

inline std::ostream& operator<<(std::ostream& out, const BattleBuffConfigTable& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SafetyRangePlayerConfig__isset {
  _SafetyRangePlayerConfig__isset() : id(false), starTime(false), radius(false), radio(false), changeCountDown(false), hurtIntervalTime(false) {}
  bool id :1;
  bool starTime :1;
  bool radius :1;
  bool radio :1;
  bool changeCountDown :1;
  bool hurtIntervalTime :1;
} _SafetyRangePlayerConfig__isset;

class SafetyRangePlayerConfig : public virtual ::apache::thrift::TBase {
 public:

  SafetyRangePlayerConfig(const SafetyRangePlayerConfig&);
  SafetyRangePlayerConfig& operator=(const SafetyRangePlayerConfig&);
  SafetyRangePlayerConfig() : id(0), starTime(0), radius(0), radio(0), changeCountDown(0), hurtIntervalTime(0) {
  }

  virtual ~SafetyRangePlayerConfig() throw();
  int32_t id;
  int32_t starTime;
  int32_t radius;
  int32_t radio;
  int32_t changeCountDown;
  int32_t hurtIntervalTime;

  _SafetyRangePlayerConfig__isset __isset;

  void __set_id(const int32_t val);

  void __set_starTime(const int32_t val);

  void __set_radius(const int32_t val);

  void __set_radio(const int32_t val);

  void __set_changeCountDown(const int32_t val);

  void __set_hurtIntervalTime(const int32_t val);

  bool operator == (const SafetyRangePlayerConfig & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(starTime == rhs.starTime))
      return false;
    if (!(radius == rhs.radius))
      return false;
    if (!(radio == rhs.radio))
      return false;
    if (!(changeCountDown == rhs.changeCountDown))
      return false;
    if (!(hurtIntervalTime == rhs.hurtIntervalTime))
      return false;
    return true;
  }
  bool operator != (const SafetyRangePlayerConfig &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SafetyRangePlayerConfig & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SafetyRangePlayerConfig &a, SafetyRangePlayerConfig &b);

inline std::ostream& operator<<(std::ostream& out, const SafetyRangePlayerConfig& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SafetyRangePlayerConfigTable__isset {
  _SafetyRangePlayerConfigTable__isset() : safetyRangePlayerConfigMap(false) {}
  bool safetyRangePlayerConfigMap :1;
} _SafetyRangePlayerConfigTable__isset;

class SafetyRangePlayerConfigTable : public virtual ::apache::thrift::TBase {
 public:

  SafetyRangePlayerConfigTable(const SafetyRangePlayerConfigTable&);
  SafetyRangePlayerConfigTable& operator=(const SafetyRangePlayerConfigTable&);
  SafetyRangePlayerConfigTable() {
  }

  virtual ~SafetyRangePlayerConfigTable() throw();
  std::map<int32_t, SafetyRangePlayerConfig>  safetyRangePlayerConfigMap;

  _SafetyRangePlayerConfigTable__isset __isset;

  void __set_safetyRangePlayerConfigMap(const std::map<int32_t, SafetyRangePlayerConfig> & val);

  bool operator == (const SafetyRangePlayerConfigTable & rhs) const
  {
    if (!(safetyRangePlayerConfigMap == rhs.safetyRangePlayerConfigMap))
      return false;
    return true;
  }
  bool operator != (const SafetyRangePlayerConfigTable &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SafetyRangePlayerConfigTable & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SafetyRangePlayerConfigTable &a, SafetyRangePlayerConfigTable &b);

inline std::ostream& operator<<(std::ostream& out, const SafetyRangePlayerConfigTable& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _DrawCageConfig__isset {
  _DrawCageConfig__isset() : drawRadius(false), captureRadius(false), captureTime(false), cost(false) {}
  bool drawRadius :1;
  bool captureRadius :1;
  bool captureTime :1;
  bool cost :1;
} _DrawCageConfig__isset;

class DrawCageConfig : public virtual ::apache::thrift::TBase {
 public:

  DrawCageConfig(const DrawCageConfig&);
  DrawCageConfig& operator=(const DrawCageConfig&);
  DrawCageConfig() : drawRadius(0), captureRadius(0), captureTime(0), cost(0) {
  }

  virtual ~DrawCageConfig() throw();
  int32_t drawRadius;
  double captureRadius;
  double captureTime;
  int32_t cost;

  _DrawCageConfig__isset __isset;

  void __set_drawRadius(const int32_t val);

  void __set_captureRadius(const double val);

  void __set_captureTime(const double val);

  void __set_cost(const int32_t val);

  bool operator == (const DrawCageConfig & rhs) const
  {
    if (!(drawRadius == rhs.drawRadius))
      return false;
    if (!(captureRadius == rhs.captureRadius))
      return false;
    if (!(captureTime == rhs.captureTime))
      return false;
    if (!(cost == rhs.cost))
      return false;
    return true;
  }
  bool operator != (const DrawCageConfig &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DrawCageConfig & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DrawCageConfig &a, DrawCageConfig &b);

inline std::ostream& operator<<(std::ostream& out, const DrawCageConfig& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _DrawCageConfigTable__isset {
  _DrawCageConfigTable__isset() : drawCageMap(false) {}
  bool drawCageMap :1;
} _DrawCageConfigTable__isset;

class DrawCageConfigTable : public virtual ::apache::thrift::TBase {
 public:

  DrawCageConfigTable(const DrawCageConfigTable&);
  DrawCageConfigTable& operator=(const DrawCageConfigTable&);
  DrawCageConfigTable() {
  }

  virtual ~DrawCageConfigTable() throw();
  std::map<int32_t, DrawCageConfig>  drawCageMap;

  _DrawCageConfigTable__isset __isset;

  void __set_drawCageMap(const std::map<int32_t, DrawCageConfig> & val);

  bool operator == (const DrawCageConfigTable & rhs) const
  {
    if (!(drawCageMap == rhs.drawCageMap))
      return false;
    return true;
  }
  bool operator != (const DrawCageConfigTable &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DrawCageConfigTable & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DrawCageConfigTable &a, DrawCageConfigTable &b);

inline std::ostream& operator<<(std::ostream& out, const DrawCageConfigTable& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _DrawWallConfig__isset {
  _DrawWallConfig__isset() : id(false), stage(false), color(false), hp(false), dropBlood(false), cost(false) {}
  bool id :1;
  bool stage :1;
  bool color :1;
  bool hp :1;
  bool dropBlood :1;
  bool cost :1;
} _DrawWallConfig__isset;

class DrawWallConfig : public virtual ::apache::thrift::TBase {
 public:

  DrawWallConfig(const DrawWallConfig&);
  DrawWallConfig& operator=(const DrawWallConfig&);
  DrawWallConfig() : id(0), stage(0), color(), hp(0), dropBlood(0), cost(0) {
  }

  virtual ~DrawWallConfig() throw();
  int32_t id;
  double stage;
  std::string color;
  int32_t hp;
  int32_t dropBlood;
  int32_t cost;

  _DrawWallConfig__isset __isset;

  void __set_id(const int32_t val);

  void __set_stage(const double val);

  void __set_color(const std::string& val);

  void __set_hp(const int32_t val);

  void __set_dropBlood(const int32_t val);

  void __set_cost(const int32_t val);

  bool operator == (const DrawWallConfig & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(stage == rhs.stage))
      return false;
    if (!(color == rhs.color))
      return false;
    if (!(hp == rhs.hp))
      return false;
    if (!(dropBlood == rhs.dropBlood))
      return false;
    if (!(cost == rhs.cost))
      return false;
    return true;
  }
  bool operator != (const DrawWallConfig &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DrawWallConfig & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DrawWallConfig &a, DrawWallConfig &b);

inline std::ostream& operator<<(std::ostream& out, const DrawWallConfig& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _DrawWallConfigTable__isset {
  _DrawWallConfigTable__isset() : drawWallMap(false) {}
  bool drawWallMap :1;
} _DrawWallConfigTable__isset;

class DrawWallConfigTable : public virtual ::apache::thrift::TBase {
 public:

  DrawWallConfigTable(const DrawWallConfigTable&);
  DrawWallConfigTable& operator=(const DrawWallConfigTable&);
  DrawWallConfigTable() {
  }

  virtual ~DrawWallConfigTable() throw();
  std::map<int32_t, DrawWallConfig>  drawWallMap;

  _DrawWallConfigTable__isset __isset;

  void __set_drawWallMap(const std::map<int32_t, DrawWallConfig> & val);

  bool operator == (const DrawWallConfigTable & rhs) const
  {
    if (!(drawWallMap == rhs.drawWallMap))
      return false;
    return true;
  }
  bool operator != (const DrawWallConfigTable &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DrawWallConfigTable & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DrawWallConfigTable &a, DrawWallConfigTable &b);

inline std::ostream& operator<<(std::ostream& out, const DrawWallConfigTable& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SkillConfig__isset {
  _SkillConfig__isset() : id(false), targetId(false), limitId(false), funcId(false), icon(false), cdTime(false), maxCount(false), mpCost(false), isAend(false), skillType(false), skillRadiusResource(false), skillRadius(false) {}
  bool id :1;
  bool targetId :1;
  bool limitId :1;
  bool funcId :1;
  bool icon :1;
  bool cdTime :1;
  bool maxCount :1;
  bool mpCost :1;
  bool isAend :1;
  bool skillType :1;
  bool skillRadiusResource :1;
  bool skillRadius :1;
} _SkillConfig__isset;

class SkillConfig : public virtual ::apache::thrift::TBase {
 public:

  SkillConfig(const SkillConfig&);
  SkillConfig& operator=(const SkillConfig&);
  SkillConfig() : id(0), targetId(0), limitId(0), funcId(0), icon(), cdTime(0), maxCount(0), mpCost(0), isAend(0), skillType(0), skillRadiusResource(), skillRadius(0) {
  }

  virtual ~SkillConfig() throw();
  int32_t id;
  int32_t targetId;
  int32_t limitId;
  int32_t funcId;
  std::string icon;
  int32_t cdTime;
  int32_t maxCount;
  int32_t mpCost;
  bool isAend;
  int32_t skillType;
  std::string skillRadiusResource;
  int32_t skillRadius;

  _SkillConfig__isset __isset;

  void __set_id(const int32_t val);

  void __set_targetId(const int32_t val);

  void __set_limitId(const int32_t val);

  void __set_funcId(const int32_t val);

  void __set_icon(const std::string& val);

  void __set_cdTime(const int32_t val);

  void __set_maxCount(const int32_t val);

  void __set_mpCost(const int32_t val);

  void __set_isAend(const bool val);

  void __set_skillType(const int32_t val);

  void __set_skillRadiusResource(const std::string& val);

  void __set_skillRadius(const int32_t val);

  bool operator == (const SkillConfig & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(targetId == rhs.targetId))
      return false;
    if (!(limitId == rhs.limitId))
      return false;
    if (!(funcId == rhs.funcId))
      return false;
    if (!(icon == rhs.icon))
      return false;
    if (!(cdTime == rhs.cdTime))
      return false;
    if (!(maxCount == rhs.maxCount))
      return false;
    if (!(mpCost == rhs.mpCost))
      return false;
    if (!(isAend == rhs.isAend))
      return false;
    if (!(skillType == rhs.skillType))
      return false;
    if (!(skillRadiusResource == rhs.skillRadiusResource))
      return false;
    if (!(skillRadius == rhs.skillRadius))
      return false;
    return true;
  }
  bool operator != (const SkillConfig &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SkillConfig & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SkillConfig &a, SkillConfig &b);

inline std::ostream& operator<<(std::ostream& out, const SkillConfig& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SkillConfigTable__isset {
  _SkillConfigTable__isset() : skillMap(false) {}
  bool skillMap :1;
} _SkillConfigTable__isset;

class SkillConfigTable : public virtual ::apache::thrift::TBase {
 public:

  SkillConfigTable(const SkillConfigTable&);
  SkillConfigTable& operator=(const SkillConfigTable&);
  SkillConfigTable() {
  }

  virtual ~SkillConfigTable() throw();
  std::map<int32_t, SkillConfig>  skillMap;

  _SkillConfigTable__isset __isset;

  void __set_skillMap(const std::map<int32_t, SkillConfig> & val);

  bool operator == (const SkillConfigTable & rhs) const
  {
    if (!(skillMap == rhs.skillMap))
      return false;
    return true;
  }
  bool operator != (const SkillConfigTable &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SkillConfigTable & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SkillConfigTable &a, SkillConfigTable &b);

inline std::ostream& operator<<(std::ostream& out, const SkillConfigTable& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _InitSkillConfig__isset {
  _InitSkillConfig__isset() : id(false), count(false) {}
  bool id :1;
  bool count :1;
} _InitSkillConfig__isset;

class InitSkillConfig : public virtual ::apache::thrift::TBase {
 public:

  InitSkillConfig(const InitSkillConfig&);
  InitSkillConfig& operator=(const InitSkillConfig&);
  InitSkillConfig() : id(0), count(0) {
  }

  virtual ~InitSkillConfig() throw();
  int32_t id;
  int32_t count;

  _InitSkillConfig__isset __isset;

  void __set_id(const int32_t val);

  void __set_count(const int32_t val);

  bool operator == (const InitSkillConfig & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const InitSkillConfig &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InitSkillConfig & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(InitSkillConfig &a, InitSkillConfig &b);

inline std::ostream& operator<<(std::ostream& out, const InitSkillConfig& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _InitSkillConfigTable__isset {
  _InitSkillConfigTable__isset() : initSkillMap(false) {}
  bool initSkillMap :1;
} _InitSkillConfigTable__isset;

class InitSkillConfigTable : public virtual ::apache::thrift::TBase {
 public:

  InitSkillConfigTable(const InitSkillConfigTable&);
  InitSkillConfigTable& operator=(const InitSkillConfigTable&);
  InitSkillConfigTable() {
  }

  virtual ~InitSkillConfigTable() throw();
  std::map<int32_t, InitSkillConfig>  initSkillMap;

  _InitSkillConfigTable__isset __isset;

  void __set_initSkillMap(const std::map<int32_t, InitSkillConfig> & val);

  bool operator == (const InitSkillConfigTable & rhs) const
  {
    if (!(initSkillMap == rhs.initSkillMap))
      return false;
    return true;
  }
  bool operator != (const InitSkillConfigTable &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InitSkillConfigTable & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(InitSkillConfigTable &a, InitSkillConfigTable &b);

inline std::ostream& operator<<(std::ostream& out, const InitSkillConfigTable& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _MagicConfig__isset {
  _MagicConfig__isset() : id(false), model(false), comPrefab(false), dieEffect(false), maxHp(false), initSpeed(false), initFuncId(false), triggerLimitId(false), triggerFuncId(false), execTargetId(false), execLimitId(false), execFuncId(false), category(false), lifeCycle(false), isTracing(false), magicClassType(false) {}
  bool id :1;
  bool model :1;
  bool comPrefab :1;
  bool dieEffect :1;
  bool maxHp :1;
  bool initSpeed :1;
  bool initFuncId :1;
  bool triggerLimitId :1;
  bool triggerFuncId :1;
  bool execTargetId :1;
  bool execLimitId :1;
  bool execFuncId :1;
  bool category :1;
  bool lifeCycle :1;
  bool isTracing :1;
  bool magicClassType :1;
} _MagicConfig__isset;

class MagicConfig : public virtual ::apache::thrift::TBase {
 public:

  MagicConfig(const MagicConfig&);
  MagicConfig& operator=(const MagicConfig&);
  MagicConfig() : id(0), model(), comPrefab(), dieEffect(), maxHp(0), initSpeed(0), initFuncId(0), triggerLimitId(0), triggerFuncId(0), execTargetId(0), execLimitId(0), execFuncId(0), category(0), lifeCycle(0), isTracing(0), magicClassType() {
  }

  virtual ~MagicConfig() throw();
  int32_t id;
  std::string model;
  std::string comPrefab;
  std::string dieEffect;
  int32_t maxHp;
  int32_t initSpeed;
  int32_t initFuncId;
  int32_t triggerLimitId;
  int32_t triggerFuncId;
  int32_t execTargetId;
  int32_t execLimitId;
  int32_t execFuncId;
  int32_t category;
  int32_t lifeCycle;
  bool isTracing;
  std::string magicClassType;

  _MagicConfig__isset __isset;

  void __set_id(const int32_t val);

  void __set_model(const std::string& val);

  void __set_comPrefab(const std::string& val);

  void __set_dieEffect(const std::string& val);

  void __set_maxHp(const int32_t val);

  void __set_initSpeed(const int32_t val);

  void __set_initFuncId(const int32_t val);

  void __set_triggerLimitId(const int32_t val);

  void __set_triggerFuncId(const int32_t val);

  void __set_execTargetId(const int32_t val);

  void __set_execLimitId(const int32_t val);

  void __set_execFuncId(const int32_t val);

  void __set_category(const int32_t val);

  void __set_lifeCycle(const int32_t val);

  void __set_isTracing(const bool val);

  void __set_magicClassType(const std::string& val);

  bool operator == (const MagicConfig & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(model == rhs.model))
      return false;
    if (!(comPrefab == rhs.comPrefab))
      return false;
    if (!(dieEffect == rhs.dieEffect))
      return false;
    if (!(maxHp == rhs.maxHp))
      return false;
    if (!(initSpeed == rhs.initSpeed))
      return false;
    if (!(initFuncId == rhs.initFuncId))
      return false;
    if (!(triggerLimitId == rhs.triggerLimitId))
      return false;
    if (!(triggerFuncId == rhs.triggerFuncId))
      return false;
    if (!(execTargetId == rhs.execTargetId))
      return false;
    if (!(execLimitId == rhs.execLimitId))
      return false;
    if (!(execFuncId == rhs.execFuncId))
      return false;
    if (!(category == rhs.category))
      return false;
    if (!(lifeCycle == rhs.lifeCycle))
      return false;
    if (!(isTracing == rhs.isTracing))
      return false;
    if (!(magicClassType == rhs.magicClassType))
      return false;
    return true;
  }
  bool operator != (const MagicConfig &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MagicConfig & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MagicConfig &a, MagicConfig &b);

inline std::ostream& operator<<(std::ostream& out, const MagicConfig& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _MagicConfigTable__isset {
  _MagicConfigTable__isset() : magicMap(false) {}
  bool magicMap :1;
} _MagicConfigTable__isset;

class MagicConfigTable : public virtual ::apache::thrift::TBase {
 public:

  MagicConfigTable(const MagicConfigTable&);
  MagicConfigTable& operator=(const MagicConfigTable&);
  MagicConfigTable() {
  }

  virtual ~MagicConfigTable() throw();
  std::map<int32_t, MagicConfig>  magicMap;

  _MagicConfigTable__isset __isset;

  void __set_magicMap(const std::map<int32_t, MagicConfig> & val);

  bool operator == (const MagicConfigTable & rhs) const
  {
    if (!(magicMap == rhs.magicMap))
      return false;
    return true;
  }
  bool operator != (const MagicConfigTable &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MagicConfigTable & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MagicConfigTable &a, MagicConfigTable &b);

inline std::ostream& operator<<(std::ostream& out, const MagicConfigTable& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CategoriesConfig__isset {
  _CategoriesConfig__isset() : id(false), type(false) {}
  bool id :1;
  bool type :1;
} _CategoriesConfig__isset;

class CategoriesConfig : public virtual ::apache::thrift::TBase {
 public:

  CategoriesConfig(const CategoriesConfig&);
  CategoriesConfig& operator=(const CategoriesConfig&);
  CategoriesConfig() : id(0), type(0) {
  }

  virtual ~CategoriesConfig() throw();
  int32_t id;
  int32_t type;

  _CategoriesConfig__isset __isset;

  void __set_id(const int32_t val);

  void __set_type(const int32_t val);

  bool operator == (const CategoriesConfig & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const CategoriesConfig &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CategoriesConfig & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CategoriesConfig &a, CategoriesConfig &b);

inline std::ostream& operator<<(std::ostream& out, const CategoriesConfig& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CategoriesConfigTable__isset {
  _CategoriesConfigTable__isset() : categoriesMap(false) {}
  bool categoriesMap :1;
} _CategoriesConfigTable__isset;

class CategoriesConfigTable : public virtual ::apache::thrift::TBase {
 public:

  CategoriesConfigTable(const CategoriesConfigTable&);
  CategoriesConfigTable& operator=(const CategoriesConfigTable&);
  CategoriesConfigTable() {
  }

  virtual ~CategoriesConfigTable() throw();
  std::map<int32_t, CategoriesConfig>  categoriesMap;

  _CategoriesConfigTable__isset __isset;

  void __set_categoriesMap(const std::map<int32_t, CategoriesConfig> & val);

  bool operator == (const CategoriesConfigTable & rhs) const
  {
    if (!(categoriesMap == rhs.categoriesMap))
      return false;
    return true;
  }
  bool operator != (const CategoriesConfigTable &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CategoriesConfigTable & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CategoriesConfigTable &a, CategoriesConfigTable &b);

inline std::ostream& operator<<(std::ostream& out, const CategoriesConfigTable& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ModelColliders__isset {
  _ModelColliders__isset() : sizeRadius(false), boxSize(false), triggerRadius(false), triggerSize(false) {}
  bool sizeRadius :1;
  bool boxSize :1;
  bool triggerRadius :1;
  bool triggerSize :1;
} _ModelColliders__isset;

class ModelColliders : public virtual ::apache::thrift::TBase {
 public:

  ModelColliders(const ModelColliders&);
  ModelColliders& operator=(const ModelColliders&);
  ModelColliders() : sizeRadius(0), triggerRadius(0) {
  }

  virtual ~ModelColliders() throw();
  int32_t sizeRadius;
   ::TVector3 boxSize;
  int32_t triggerRadius;
   ::TVector3 triggerSize;

  _ModelColliders__isset __isset;

  void __set_sizeRadius(const int32_t val);

  void __set_boxSize(const  ::TVector3& val);

  void __set_triggerRadius(const int32_t val);

  void __set_triggerSize(const  ::TVector3& val);

  bool operator == (const ModelColliders & rhs) const
  {
    if (!(sizeRadius == rhs.sizeRadius))
      return false;
    if (!(boxSize == rhs.boxSize))
      return false;
    if (!(triggerRadius == rhs.triggerRadius))
      return false;
    if (!(triggerSize == rhs.triggerSize))
      return false;
    return true;
  }
  bool operator != (const ModelColliders &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ModelColliders & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ModelColliders &a, ModelColliders &b);

inline std::ostream& operator<<(std::ostream& out, const ModelColliders& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ModelCollidersConfig__isset {
  _ModelCollidersConfig__isset() : modelColliderMap(false) {}
  bool modelColliderMap :1;
} _ModelCollidersConfig__isset;

class ModelCollidersConfig : public virtual ::apache::thrift::TBase {
 public:

  ModelCollidersConfig(const ModelCollidersConfig&);
  ModelCollidersConfig& operator=(const ModelCollidersConfig&);
  ModelCollidersConfig() {
  }

  virtual ~ModelCollidersConfig() throw();
  std::map<int32_t, ModelColliders>  modelColliderMap;

  _ModelCollidersConfig__isset __isset;

  void __set_modelColliderMap(const std::map<int32_t, ModelColliders> & val);

  bool operator == (const ModelCollidersConfig & rhs) const
  {
    if (!(modelColliderMap == rhs.modelColliderMap))
      return false;
    return true;
  }
  bool operator != (const ModelCollidersConfig &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ModelCollidersConfig & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ModelCollidersConfig &a, ModelCollidersConfig &b);

inline std::ostream& operator<<(std::ostream& out, const ModelCollidersConfig& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ShipConfig__isset {
  _ShipConfig__isset() : id(false), shipName(false), shipIcon(false), level(false), icon(false), speed(false), driverSlotCount(false), shooterSlotCount(false), uniqueSkillCount(false), uniqueSkillIds(false), attack(false), shootRate(false), maxMp(false), mpExpend(false), bloodGrid(false), timeLimit(false), maxHp(false), sight(false), searchLightOffset(false), searchLightRadius(false), shooterRadarTime(false), skillRadarTime(false), slayRadarTime(false), bulletSpeed(false), bulletSight(false), bulletCarry(false), ChargeAngularSpeed(false), ChargeSpeed(false), rotationSpeed(false), norRenLv(false), enemyAtkRenLv(false), enemyRenLv(false) {}
  bool id :1;
  bool shipName :1;
  bool shipIcon :1;
  bool level :1;
  bool icon :1;
  bool speed :1;
  bool driverSlotCount :1;
  bool shooterSlotCount :1;
  bool uniqueSkillCount :1;
  bool uniqueSkillIds :1;
  bool attack :1;
  bool shootRate :1;
  bool maxMp :1;
  bool mpExpend :1;
  bool bloodGrid :1;
  bool timeLimit :1;
  bool maxHp :1;
  bool sight :1;
  bool searchLightOffset :1;
  bool searchLightRadius :1;
  bool shooterRadarTime :1;
  bool skillRadarTime :1;
  bool slayRadarTime :1;
  bool bulletSpeed :1;
  bool bulletSight :1;
  bool bulletCarry :1;
  bool ChargeAngularSpeed :1;
  bool ChargeSpeed :1;
  bool rotationSpeed :1;
  bool norRenLv :1;
  bool enemyAtkRenLv :1;
  bool enemyRenLv :1;
} _ShipConfig__isset;

class ShipConfig : public virtual ::apache::thrift::TBase {
 public:

  ShipConfig(const ShipConfig&);
  ShipConfig& operator=(const ShipConfig&);
  ShipConfig() : id(0), shipName(), shipIcon(), level(0), icon(), speed(0), driverSlotCount(0), shooterSlotCount(0), uniqueSkillCount(0), attack(0), shootRate(0), maxMp(0), mpExpend(0), bloodGrid(0), timeLimit(0), maxHp(0), sight(0), searchLightOffset(0), searchLightRadius(0), shooterRadarTime(0), skillRadarTime(0), slayRadarTime(0), bulletSpeed(0), bulletSight(0), bulletCarry(0), ChargeAngularSpeed(0), ChargeSpeed(0), rotationSpeed(0), norRenLv(0), enemyAtkRenLv(0), enemyRenLv(0) {
  }

  virtual ~ShipConfig() throw();
  int32_t id;
  std::string shipName;
  std::string shipIcon;
  int32_t level;
  std::string icon;
  int32_t speed;
  int32_t driverSlotCount;
  int32_t shooterSlotCount;
  int32_t uniqueSkillCount;
  std::vector<int32_t>  uniqueSkillIds;
  int32_t attack;
  int32_t shootRate;
  int32_t maxMp;
  int32_t mpExpend;
  int32_t bloodGrid;
  int32_t timeLimit;
  int32_t maxHp;
  int32_t sight;
  int32_t searchLightOffset;
  int32_t searchLightRadius;
  int32_t shooterRadarTime;
  int32_t skillRadarTime;
  int32_t slayRadarTime;
  int32_t bulletSpeed;
  int32_t bulletSight;
  int32_t bulletCarry;
  int32_t ChargeAngularSpeed;
  int32_t ChargeSpeed;
  int32_t rotationSpeed;
  int32_t norRenLv;
  int32_t enemyAtkRenLv;
  int32_t enemyRenLv;

  _ShipConfig__isset __isset;

  void __set_id(const int32_t val);

  void __set_shipName(const std::string& val);

  void __set_shipIcon(const std::string& val);

  void __set_level(const int32_t val);

  void __set_icon(const std::string& val);

  void __set_speed(const int32_t val);

  void __set_driverSlotCount(const int32_t val);

  void __set_shooterSlotCount(const int32_t val);

  void __set_uniqueSkillCount(const int32_t val);

  void __set_uniqueSkillIds(const std::vector<int32_t> & val);

  void __set_attack(const int32_t val);

  void __set_shootRate(const int32_t val);

  void __set_maxMp(const int32_t val);

  void __set_mpExpend(const int32_t val);

  void __set_bloodGrid(const int32_t val);

  void __set_timeLimit(const int32_t val);

  void __set_maxHp(const int32_t val);

  void __set_sight(const int32_t val);

  void __set_searchLightOffset(const int32_t val);

  void __set_searchLightRadius(const int32_t val);

  void __set_shooterRadarTime(const int32_t val);

  void __set_skillRadarTime(const int32_t val);

  void __set_slayRadarTime(const int32_t val);

  void __set_bulletSpeed(const int32_t val);

  void __set_bulletSight(const int32_t val);

  void __set_bulletCarry(const int32_t val);

  void __set_ChargeAngularSpeed(const int32_t val);

  void __set_ChargeSpeed(const int32_t val);

  void __set_rotationSpeed(const int32_t val);

  void __set_norRenLv(const int32_t val);

  void __set_enemyAtkRenLv(const int32_t val);

  void __set_enemyRenLv(const int32_t val);

  bool operator == (const ShipConfig & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(shipName == rhs.shipName))
      return false;
    if (!(shipIcon == rhs.shipIcon))
      return false;
    if (!(level == rhs.level))
      return false;
    if (!(icon == rhs.icon))
      return false;
    if (!(speed == rhs.speed))
      return false;
    if (!(driverSlotCount == rhs.driverSlotCount))
      return false;
    if (!(shooterSlotCount == rhs.shooterSlotCount))
      return false;
    if (!(uniqueSkillCount == rhs.uniqueSkillCount))
      return false;
    if (!(uniqueSkillIds == rhs.uniqueSkillIds))
      return false;
    if (!(attack == rhs.attack))
      return false;
    if (!(shootRate == rhs.shootRate))
      return false;
    if (!(maxMp == rhs.maxMp))
      return false;
    if (!(mpExpend == rhs.mpExpend))
      return false;
    if (!(bloodGrid == rhs.bloodGrid))
      return false;
    if (!(timeLimit == rhs.timeLimit))
      return false;
    if (!(maxHp == rhs.maxHp))
      return false;
    if (!(sight == rhs.sight))
      return false;
    if (!(searchLightOffset == rhs.searchLightOffset))
      return false;
    if (!(searchLightRadius == rhs.searchLightRadius))
      return false;
    if (!(shooterRadarTime == rhs.shooterRadarTime))
      return false;
    if (!(skillRadarTime == rhs.skillRadarTime))
      return false;
    if (!(slayRadarTime == rhs.slayRadarTime))
      return false;
    if (!(bulletSpeed == rhs.bulletSpeed))
      return false;
    if (!(bulletSight == rhs.bulletSight))
      return false;
    if (!(bulletCarry == rhs.bulletCarry))
      return false;
    if (!(ChargeAngularSpeed == rhs.ChargeAngularSpeed))
      return false;
    if (!(ChargeSpeed == rhs.ChargeSpeed))
      return false;
    if (!(rotationSpeed == rhs.rotationSpeed))
      return false;
    if (!(norRenLv == rhs.norRenLv))
      return false;
    if (!(enemyAtkRenLv == rhs.enemyAtkRenLv))
      return false;
    if (!(enemyRenLv == rhs.enemyRenLv))
      return false;
    return true;
  }
  bool operator != (const ShipConfig &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShipConfig & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ShipConfig &a, ShipConfig &b);

inline std::ostream& operator<<(std::ostream& out, const ShipConfig& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ShipConfigTable__isset {
  _ShipConfigTable__isset() : shipMap(false) {}
  bool shipMap :1;
} _ShipConfigTable__isset;

class ShipConfigTable : public virtual ::apache::thrift::TBase {
 public:

  ShipConfigTable(const ShipConfigTable&);
  ShipConfigTable& operator=(const ShipConfigTable&);
  ShipConfigTable() {
  }

  virtual ~ShipConfigTable() throw();
  std::map<int32_t, ShipConfig>  shipMap;

  _ShipConfigTable__isset __isset;

  void __set_shipMap(const std::map<int32_t, ShipConfig> & val);

  bool operator == (const ShipConfigTable & rhs) const
  {
    if (!(shipMap == rhs.shipMap))
      return false;
    return true;
  }
  bool operator != (const ShipConfigTable &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ShipConfigTable & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ShipConfigTable &a, ShipConfigTable &b);

inline std::ostream& operator<<(std::ostream& out, const ShipConfigTable& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _GameSetConfig__isset {
  _GameSetConfig__isset() : id(false), plan(false), mapId(false), rhythmFactor(false) {}
  bool id :1;
  bool plan :1;
  bool mapId :1;
  bool rhythmFactor :1;
} _GameSetConfig__isset;

class GameSetConfig : public virtual ::apache::thrift::TBase {
 public:

  GameSetConfig(const GameSetConfig&);
  GameSetConfig& operator=(const GameSetConfig&);
  GameSetConfig() : id(0), plan(0), mapId(0), rhythmFactor(0) {
  }

  virtual ~GameSetConfig() throw();
  int32_t id;
  int32_t plan;
  int32_t mapId;
  int32_t rhythmFactor;

  _GameSetConfig__isset __isset;

  void __set_id(const int32_t val);

  void __set_plan(const int32_t val);

  void __set_mapId(const int32_t val);

  void __set_rhythmFactor(const int32_t val);

  bool operator == (const GameSetConfig & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(plan == rhs.plan))
      return false;
    if (!(mapId == rhs.mapId))
      return false;
    if (!(rhythmFactor == rhs.rhythmFactor))
      return false;
    return true;
  }
  bool operator != (const GameSetConfig &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameSetConfig & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GameSetConfig &a, GameSetConfig &b);

inline std::ostream& operator<<(std::ostream& out, const GameSetConfig& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _GameSetConfigTable__isset {
  _GameSetConfigTable__isset() : gameSetMap(false) {}
  bool gameSetMap :1;
} _GameSetConfigTable__isset;

class GameSetConfigTable : public virtual ::apache::thrift::TBase {
 public:

  GameSetConfigTable(const GameSetConfigTable&);
  GameSetConfigTable& operator=(const GameSetConfigTable&);
  GameSetConfigTable() {
  }

  virtual ~GameSetConfigTable() throw();
  std::map<int32_t, GameSetConfig>  gameSetMap;

  _GameSetConfigTable__isset __isset;

  void __set_gameSetMap(const std::map<int32_t, GameSetConfig> & val);

  bool operator == (const GameSetConfigTable & rhs) const
  {
    if (!(gameSetMap == rhs.gameSetMap))
      return false;
    return true;
  }
  bool operator != (const GameSetConfigTable &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameSetConfigTable & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GameSetConfigTable &a, GameSetConfigTable &b);

inline std::ostream& operator<<(std::ostream& out, const GameSetConfigTable& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _HomeConfigTable__isset {
  _HomeConfigTable__isset() : id(false), category(false), comPrefab(false), resource(false), maxHp(false) {}
  bool id :1;
  bool category :1;
  bool comPrefab :1;
  bool resource :1;
  bool maxHp :1;
} _HomeConfigTable__isset;

class HomeConfigTable : public virtual ::apache::thrift::TBase {
 public:

  HomeConfigTable(const HomeConfigTable&);
  HomeConfigTable& operator=(const HomeConfigTable&);
  HomeConfigTable() : id(0), category(0), comPrefab(), resource(), maxHp(0) {
  }

  virtual ~HomeConfigTable() throw();
  int32_t id;
  int32_t category;
  std::string comPrefab;
  std::string resource;
  int32_t maxHp;

  _HomeConfigTable__isset __isset;

  void __set_id(const int32_t val);

  void __set_category(const int32_t val);

  void __set_comPrefab(const std::string& val);

  void __set_resource(const std::string& val);

  void __set_maxHp(const int32_t val);

  bool operator == (const HomeConfigTable & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(category == rhs.category))
      return false;
    if (!(comPrefab == rhs.comPrefab))
      return false;
    if (!(resource == rhs.resource))
      return false;
    if (!(maxHp == rhs.maxHp))
      return false;
    return true;
  }
  bool operator != (const HomeConfigTable &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HomeConfigTable & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(HomeConfigTable &a, HomeConfigTable &b);

inline std::ostream& operator<<(std::ostream& out, const HomeConfigTable& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _DeBuffConfig__isset {
  _DeBuffConfig__isset() : deBuffId(false), weight(false) {}
  bool deBuffId :1;
  bool weight :1;
} _DeBuffConfig__isset;

class DeBuffConfig : public virtual ::apache::thrift::TBase {
 public:

  DeBuffConfig(const DeBuffConfig&);
  DeBuffConfig& operator=(const DeBuffConfig&);
  DeBuffConfig() : deBuffId(0), weight(0) {
  }

  virtual ~DeBuffConfig() throw();
  int32_t deBuffId;
  int32_t weight;

  _DeBuffConfig__isset __isset;

  void __set_deBuffId(const int32_t val);

  void __set_weight(const int32_t val);

  bool operator == (const DeBuffConfig & rhs) const
  {
    if (!(deBuffId == rhs.deBuffId))
      return false;
    if (!(weight == rhs.weight))
      return false;
    return true;
  }
  bool operator != (const DeBuffConfig &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeBuffConfig & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DeBuffConfig &a, DeBuffConfig &b);

inline std::ostream& operator<<(std::ostream& out, const DeBuffConfig& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _DeBuffListConfig__isset {
  _DeBuffListConfig__isset() : deBuffConfigId(false), deBuffList(false) {}
  bool deBuffConfigId :1;
  bool deBuffList :1;
} _DeBuffListConfig__isset;

class DeBuffListConfig : public virtual ::apache::thrift::TBase {
 public:

  DeBuffListConfig(const DeBuffListConfig&);
  DeBuffListConfig& operator=(const DeBuffListConfig&);
  DeBuffListConfig() : deBuffConfigId(0) {
  }

  virtual ~DeBuffListConfig() throw();
  int32_t deBuffConfigId;
  std::vector<DeBuffConfig>  deBuffList;

  _DeBuffListConfig__isset __isset;

  void __set_deBuffConfigId(const int32_t val);

  void __set_deBuffList(const std::vector<DeBuffConfig> & val);

  bool operator == (const DeBuffListConfig & rhs) const
  {
    if (!(deBuffConfigId == rhs.deBuffConfigId))
      return false;
    if (!(deBuffList == rhs.deBuffList))
      return false;
    return true;
  }
  bool operator != (const DeBuffListConfig &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeBuffListConfig & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DeBuffListConfig &a, DeBuffListConfig &b);

inline std::ostream& operator<<(std::ostream& out, const DeBuffListConfig& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _DeBuffConfigTable__isset {
  _DeBuffConfigTable__isset() : deBuffMap(false) {}
  bool deBuffMap :1;
} _DeBuffConfigTable__isset;

class DeBuffConfigTable : public virtual ::apache::thrift::TBase {
 public:

  DeBuffConfigTable(const DeBuffConfigTable&);
  DeBuffConfigTable& operator=(const DeBuffConfigTable&);
  DeBuffConfigTable() {
  }

  virtual ~DeBuffConfigTable() throw();
  std::map<int32_t, DeBuffListConfig>  deBuffMap;

  _DeBuffConfigTable__isset __isset;

  void __set_deBuffMap(const std::map<int32_t, DeBuffListConfig> & val);

  bool operator == (const DeBuffConfigTable & rhs) const
  {
    if (!(deBuffMap == rhs.deBuffMap))
      return false;
    return true;
  }
  bool operator != (const DeBuffConfigTable &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeBuffConfigTable & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DeBuffConfigTable &a, DeBuffConfigTable &b);

inline std::ostream& operator<<(std::ostream& out, const DeBuffConfigTable& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _UltLaserConfig__isset {
  _UltLaserConfig__isset() : ultId(false), heigh(false), width(false), harm(false), cd(false), minChargeTime(false), maxChargeTime(false) {}
  bool ultId :1;
  bool heigh :1;
  bool width :1;
  bool harm :1;
  bool cd :1;
  bool minChargeTime :1;
  bool maxChargeTime :1;
} _UltLaserConfig__isset;

class UltLaserConfig : public virtual ::apache::thrift::TBase {
 public:

  UltLaserConfig(const UltLaserConfig&);
  UltLaserConfig& operator=(const UltLaserConfig&);
  UltLaserConfig() : ultId(0), heigh(0), width(0), harm(0), cd(0), minChargeTime(0), maxChargeTime(0) {
  }

  virtual ~UltLaserConfig() throw();
  int32_t ultId;
  int32_t heigh;
  int32_t width;
  int32_t harm;
  int32_t cd;
  int32_t minChargeTime;
  int32_t maxChargeTime;

  _UltLaserConfig__isset __isset;

  void __set_ultId(const int32_t val);

  void __set_heigh(const int32_t val);

  void __set_width(const int32_t val);

  void __set_harm(const int32_t val);

  void __set_cd(const int32_t val);

  void __set_minChargeTime(const int32_t val);

  void __set_maxChargeTime(const int32_t val);

  bool operator == (const UltLaserConfig & rhs) const
  {
    if (!(ultId == rhs.ultId))
      return false;
    if (!(heigh == rhs.heigh))
      return false;
    if (!(width == rhs.width))
      return false;
    if (!(harm == rhs.harm))
      return false;
    if (!(cd == rhs.cd))
      return false;
    if (!(minChargeTime == rhs.minChargeTime))
      return false;
    if (!(maxChargeTime == rhs.maxChargeTime))
      return false;
    return true;
  }
  bool operator != (const UltLaserConfig &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UltLaserConfig & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UltLaserConfig &a, UltLaserConfig &b);

inline std::ostream& operator<<(std::ostream& out, const UltLaserConfig& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _UltPelletConfig__isset {
  _UltPelletConfig__isset() : id(false), ultId(false), harm(false), autoHarm(false), autoHarmRadius(false), expRadius(false), expLightRadius(false), expLightTime(false), speed(false), expCountDown(false), shootCount(false), cd(false), minChargeTime(false), maxChargeTime(false) {}
  bool id :1;
  bool ultId :1;
  bool harm :1;
  bool autoHarm :1;
  bool autoHarmRadius :1;
  bool expRadius :1;
  bool expLightRadius :1;
  bool expLightTime :1;
  bool speed :1;
  bool expCountDown :1;
  bool shootCount :1;
  bool cd :1;
  bool minChargeTime :1;
  bool maxChargeTime :1;
} _UltPelletConfig__isset;

class UltPelletConfig : public virtual ::apache::thrift::TBase {
 public:

  UltPelletConfig(const UltPelletConfig&);
  UltPelletConfig& operator=(const UltPelletConfig&);
  UltPelletConfig() : id(0), ultId(0), harm(0), autoHarm(0), autoHarmRadius(0), expRadius(0), expLightRadius(0), expLightTime(0), speed(0), expCountDown(0), shootCount(0), cd(0), minChargeTime(0), maxChargeTime(0) {
  }

  virtual ~UltPelletConfig() throw();
  int32_t id;
  int32_t ultId;
  int32_t harm;
  int32_t autoHarm;
  int32_t autoHarmRadius;
  int32_t expRadius;
  int32_t expLightRadius;
  int32_t expLightTime;
  int32_t speed;
  int32_t expCountDown;
  int32_t shootCount;
  int32_t cd;
  int32_t minChargeTime;
  int32_t maxChargeTime;

  _UltPelletConfig__isset __isset;

  void __set_id(const int32_t val);

  void __set_ultId(const int32_t val);

  void __set_harm(const int32_t val);

  void __set_autoHarm(const int32_t val);

  void __set_autoHarmRadius(const int32_t val);

  void __set_expRadius(const int32_t val);

  void __set_expLightRadius(const int32_t val);

  void __set_expLightTime(const int32_t val);

  void __set_speed(const int32_t val);

  void __set_expCountDown(const int32_t val);

  void __set_shootCount(const int32_t val);

  void __set_cd(const int32_t val);

  void __set_minChargeTime(const int32_t val);

  void __set_maxChargeTime(const int32_t val);

  bool operator == (const UltPelletConfig & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(ultId == rhs.ultId))
      return false;
    if (!(harm == rhs.harm))
      return false;
    if (!(autoHarm == rhs.autoHarm))
      return false;
    if (!(autoHarmRadius == rhs.autoHarmRadius))
      return false;
    if (!(expRadius == rhs.expRadius))
      return false;
    if (!(expLightRadius == rhs.expLightRadius))
      return false;
    if (!(expLightTime == rhs.expLightTime))
      return false;
    if (!(speed == rhs.speed))
      return false;
    if (!(expCountDown == rhs.expCountDown))
      return false;
    if (!(shootCount == rhs.shootCount))
      return false;
    if (!(cd == rhs.cd))
      return false;
    if (!(minChargeTime == rhs.minChargeTime))
      return false;
    if (!(maxChargeTime == rhs.maxChargeTime))
      return false;
    return true;
  }
  bool operator != (const UltPelletConfig &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UltPelletConfig & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UltPelletConfig &a, UltPelletConfig &b);

inline std::ostream& operator<<(std::ostream& out, const UltPelletConfig& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _UltTraceConfig__isset {
  _UltTraceConfig__isset() : ultId(false), hp(false), harm(false), speed(false), angularSpeed(false), bulletInteractive(false), obstacleInteractive(false), lightRadius(false), expRadius(false), expLightRadius(false), expLightTime(false), cd(false), minChargeTime(false), maxChargeTime(false) {}
  bool ultId :1;
  bool hp :1;
  bool harm :1;
  bool speed :1;
  bool angularSpeed :1;
  bool bulletInteractive :1;
  bool obstacleInteractive :1;
  bool lightRadius :1;
  bool expRadius :1;
  bool expLightRadius :1;
  bool expLightTime :1;
  bool cd :1;
  bool minChargeTime :1;
  bool maxChargeTime :1;
} _UltTraceConfig__isset;

class UltTraceConfig : public virtual ::apache::thrift::TBase {
 public:

  UltTraceConfig(const UltTraceConfig&);
  UltTraceConfig& operator=(const UltTraceConfig&);
  UltTraceConfig() : ultId(0), hp(0), harm(0), speed(0), angularSpeed(0), bulletInteractive(0), obstacleInteractive(0), lightRadius(0), expRadius(0), expLightRadius(0), expLightTime(0), cd(0), minChargeTime(0), maxChargeTime(0) {
  }

  virtual ~UltTraceConfig() throw();
  int32_t ultId;
  int32_t hp;
  int32_t harm;
  int32_t speed;
  int32_t angularSpeed;
  bool bulletInteractive;
  bool obstacleInteractive;
  int32_t lightRadius;
  int32_t expRadius;
  int32_t expLightRadius;
  int32_t expLightTime;
  int32_t cd;
  int32_t minChargeTime;
  int32_t maxChargeTime;

  _UltTraceConfig__isset __isset;

  void __set_ultId(const int32_t val);

  void __set_hp(const int32_t val);

  void __set_harm(const int32_t val);

  void __set_speed(const int32_t val);

  void __set_angularSpeed(const int32_t val);

  void __set_bulletInteractive(const bool val);

  void __set_obstacleInteractive(const bool val);

  void __set_lightRadius(const int32_t val);

  void __set_expRadius(const int32_t val);

  void __set_expLightRadius(const int32_t val);

  void __set_expLightTime(const int32_t val);

  void __set_cd(const int32_t val);

  void __set_minChargeTime(const int32_t val);

  void __set_maxChargeTime(const int32_t val);

  bool operator == (const UltTraceConfig & rhs) const
  {
    if (!(ultId == rhs.ultId))
      return false;
    if (!(hp == rhs.hp))
      return false;
    if (!(harm == rhs.harm))
      return false;
    if (!(speed == rhs.speed))
      return false;
    if (!(angularSpeed == rhs.angularSpeed))
      return false;
    if (!(bulletInteractive == rhs.bulletInteractive))
      return false;
    if (!(obstacleInteractive == rhs.obstacleInteractive))
      return false;
    if (!(lightRadius == rhs.lightRadius))
      return false;
    if (!(expRadius == rhs.expRadius))
      return false;
    if (!(expLightRadius == rhs.expLightRadius))
      return false;
    if (!(expLightTime == rhs.expLightTime))
      return false;
    if (!(cd == rhs.cd))
      return false;
    if (!(minChargeTime == rhs.minChargeTime))
      return false;
    if (!(maxChargeTime == rhs.maxChargeTime))
      return false;
    return true;
  }
  bool operator != (const UltTraceConfig &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UltTraceConfig & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UltTraceConfig &a, UltTraceConfig &b);

inline std::ostream& operator<<(std::ostream& out, const UltTraceConfig& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _UltSkillConfigTable__isset {
  _UltSkillConfigTable__isset() : ultLaser(false), ultPellet(false), ultTrace(false) {}
  bool ultLaser :1;
  bool ultPellet :1;
  bool ultTrace :1;
} _UltSkillConfigTable__isset;

class UltSkillConfigTable : public virtual ::apache::thrift::TBase {
 public:

  UltSkillConfigTable(const UltSkillConfigTable&);
  UltSkillConfigTable& operator=(const UltSkillConfigTable&);
  UltSkillConfigTable() {
  }

  virtual ~UltSkillConfigTable() throw();
  UltLaserConfig ultLaser;
  std::map<int32_t, UltPelletConfig>  ultPellet;
  UltTraceConfig ultTrace;

  _UltSkillConfigTable__isset __isset;

  void __set_ultLaser(const UltLaserConfig& val);

  void __set_ultPellet(const std::map<int32_t, UltPelletConfig> & val);

  void __set_ultTrace(const UltTraceConfig& val);

  bool operator == (const UltSkillConfigTable & rhs) const
  {
    if (!(ultLaser == rhs.ultLaser))
      return false;
    if (!(ultPellet == rhs.ultPellet))
      return false;
    if (!(ultTrace == rhs.ultTrace))
      return false;
    return true;
  }
  bool operator != (const UltSkillConfigTable &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UltSkillConfigTable & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UltSkillConfigTable &a, UltSkillConfigTable &b);

inline std::ostream& operator<<(std::ostream& out, const UltSkillConfigTable& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
