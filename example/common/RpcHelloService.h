/**
 * Autogenerated by Thrift Compiler (@PACKAGE_VERSION@)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RpcHelloService_H
#define RpcHelloService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "service_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class RpcHelloServiceIf {
 public:
  virtual ~RpcHelloServiceIf() {}
  virtual int32_t show(const std::string& name) = 0;
};

class RpcHelloServiceIfFactory {
 public:
  typedef RpcHelloServiceIf Handler;

  virtual ~RpcHelloServiceIfFactory() {}

  virtual RpcHelloServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(RpcHelloServiceIf* /* handler */) = 0;
};

class RpcHelloServiceIfSingletonFactory : virtual public RpcHelloServiceIfFactory {
 public:
  RpcHelloServiceIfSingletonFactory(const boost::shared_ptr<RpcHelloServiceIf>& iface) : iface_(iface) {}
  virtual ~RpcHelloServiceIfSingletonFactory() {}

  virtual RpcHelloServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(RpcHelloServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<RpcHelloServiceIf> iface_;
};

class RpcHelloServiceNull : virtual public RpcHelloServiceIf {
 public:
  virtual ~RpcHelloServiceNull() {}
  int32_t show(const std::string& /* name */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _RpcHelloService_show_args__isset {
  _RpcHelloService_show_args__isset() : name(false) {}
  bool name :1;
} _RpcHelloService_show_args__isset;

class RpcHelloService_show_args {
 public:

  RpcHelloService_show_args(const RpcHelloService_show_args&);
  RpcHelloService_show_args& operator=(const RpcHelloService_show_args&);
  RpcHelloService_show_args() : name() {
  }

  virtual ~RpcHelloService_show_args() throw();
  std::string name;

  _RpcHelloService_show_args__isset __isset;

  void __set_name(const std::string& val);

  bool operator == (const RpcHelloService_show_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const RpcHelloService_show_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RpcHelloService_show_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RpcHelloService_show_pargs {
 public:


  virtual ~RpcHelloService_show_pargs() throw();
  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RpcHelloService_show_result__isset {
  _RpcHelloService_show_result__isset() : success(false) {}
  bool success :1;
} _RpcHelloService_show_result__isset;

class RpcHelloService_show_result {
 public:

  RpcHelloService_show_result(const RpcHelloService_show_result&);
  RpcHelloService_show_result& operator=(const RpcHelloService_show_result&);
  RpcHelloService_show_result() : success(0) {
  }

  virtual ~RpcHelloService_show_result() throw();
  int32_t success;

  _RpcHelloService_show_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const RpcHelloService_show_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RpcHelloService_show_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RpcHelloService_show_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RpcHelloService_show_presult__isset {
  _RpcHelloService_show_presult__isset() : success(false) {}
  bool success :1;
} _RpcHelloService_show_presult__isset;

class RpcHelloService_show_presult {
 public:


  virtual ~RpcHelloService_show_presult() throw();
  int32_t* success;

  _RpcHelloService_show_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class RpcHelloServiceClient : virtual public RpcHelloServiceIf {
 public:
  RpcHelloServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  RpcHelloServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t show(const std::string& name);
  void send_show(const std::string& name);
  int32_t recv_show();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class RpcHelloServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<RpcHelloServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (RpcHelloServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_show(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  RpcHelloServiceProcessor(boost::shared_ptr<RpcHelloServiceIf> iface) :
    iface_(iface) {
    processMap_["show"] = &RpcHelloServiceProcessor::process_show;
  }

  virtual ~RpcHelloServiceProcessor() {}
};

class RpcHelloServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  RpcHelloServiceProcessorFactory(const ::boost::shared_ptr< RpcHelloServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< RpcHelloServiceIfFactory > handlerFactory_;
};

class RpcHelloServiceMultiface : virtual public RpcHelloServiceIf {
 public:
  RpcHelloServiceMultiface(std::vector<boost::shared_ptr<RpcHelloServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~RpcHelloServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<RpcHelloServiceIf> > ifaces_;
  RpcHelloServiceMultiface() {}
  void add(boost::shared_ptr<RpcHelloServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t show(const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->show(name);
    }
    return ifaces_[i]->show(name);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class RpcHelloServiceConcurrentClient : virtual public RpcHelloServiceIf {
 public:
  RpcHelloServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  RpcHelloServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t show(const std::string& name);
  int32_t send_show(const std::string& name);
  int32_t recv_show(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
