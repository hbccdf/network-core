/**
 * Autogenerated by Thrift Compiler (@PACKAGE_VERSION@)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef struct_TYPES_H
#define struct_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




struct BattlePattern {
  enum type {
    None = -1,
    Moba = 0,
    ThreeParty = 1,
    Royale = 2
  };
};

extern const std::map<int, const char*> _BattlePattern_VALUES_TO_NAMES;

struct OperateCmdType {
  enum type {
    MOVE = 0,
    MOVE_STOP = 1,
    DRAW_LINE_START = 2,
    DRAW_LINE = 3,
    DRAW_LINE_END = 4,
    CREATE_CAGE = 5,
    DRAW_WALL_ENERGY_START = 6,
    DRAW_WALL_ENERGY_CANCEL = 7,
    DRAW_WALL_START = 8,
    DRAW_WALL = 9,
    DRAW_WALL_END = 10,
    USE_SKILL_START = 20,
    USE_SKILL_STOP = 21,
    USE_SKILL_ONCE = 22,
    DROP_SKILL = 23,
    USE_ULT_SKILL_START = 24,
    USE_ULT_SKILL_END = 25,
    USE_ULT_SKILL_TRIGGER = 26,
    ULT_CONTROL_MOVE = 27,
    USE_TAG = 28
  };
};

extern const std::map<int, const char*> _OperateCmdType_VALUES_TO_NAMES;

struct SyncDataType {
  enum type {
    STATUS = 0,
    MOVE = 1,
    MOVE_END = 2,
    USE_SKILL = 3,
    BE_KILLED = 4,
    BULLET = 7,
    LINE = 8,
    CAGE = 9,
    REVIVE = 10,
    GET_ITEM = 11,
    ADD_BUFF = 12,
    DEL_BUFF = 13,
    TRIGGER_MAGIC = 14,
    DROP_SKILL = 15,
    USE_ULT_SKILL_START = 16,
    USE_ULT_SKILL_SUCCESS = 17,
    USE_ULT_SKILL_FAILED = 18,
    USE_ULT_SKILL_CANCEL = 19,
    USE_ULT_SKILL_TRIGGER = 20,
    TAG_SUCCESS = 21
  };
};

extern const std::map<int, const char*> _SyncDataType_VALUES_TO_NAMES;

struct LineType {
  enum type {
    DrawLine = 1,
    DrawWall = 2
  };
};

extern const std::map<int, const char*> _LineType_VALUES_TO_NAMES;

struct ClassType {
  enum type {
    DRIVER = 1,
    SHOOTER = 2
  };
};

extern const std::map<int, const char*> _ClassType_VALUES_TO_NAMES;

struct ObjType {
  enum type {
    PLAYER = 0,
    MONSTER = 1,
    ITEM = 2,
    MAGIC = 3,
    WALL_PALYER = 4,
    BASECENTER = 5
  };
};

extern const std::map<int, const char*> _ObjType_VALUES_TO_NAMES;

struct MonsterType {
  enum type {
    None = 0,
    ResShark = 1,
    Whale = 2,
    GuardShark = 3,
    FaceFish = 5,
    BottleItem = 6,
    BottleItem2 = 7
  };
};

extern const std::map<int, const char*> _MonsterType_VALUES_TO_NAMES;

struct MagicType {
  enum type {
    None = 0,
    ShuiLei = 1,
    PaoDan = 2
  };
};

extern const std::map<int, const char*> _MagicType_VALUES_TO_NAMES;

struct FactionType {
  enum type {
    None = -1,
    FactionA = 1,
    FactionB = 2,
    FactionC = 3
  };
};

extern const std::map<int, const char*> _FactionType_VALUES_TO_NAMES;

class TVector3;

class TRotation;

class Bounds;

class PlayerOperateCommand;

class MovementData;

class StateMaps;

class UnitSyncData;

class Move;

class MoveStop;

class UseSkill;

class KillDead;

class Bullet;

class SyncBullet;

class Line;

class Cage;

class Revive;

class SyncLine;

class GetItem;

class AddBuff;

class DelBuff;

class TriggerMagic;

class DropSkill;

class UseUltSkillStart;

class UseUltSkillSuccess;

class UseUltSkillFailed;

class UseUltSkillCancel;

class UseUltSkillTrigger;

class TagSuccess;

class SyncData;

class PlayerData;

class RoleData;

class UserData;

class AccountData;

class InstantiateData;

class RoomData;

typedef struct _TVector3__isset {
  _TVector3__isset() : x(false), y(false), z(false) {}
  bool x :1;
  bool y :1;
  bool z :1;
} _TVector3__isset;

class TVector3 : public virtual ::apache::thrift::TBase {
 public:

  TVector3(const TVector3&);
  TVector3& operator=(const TVector3&);
  TVector3() : x(0), y(0), z(0) {
  }

  virtual ~TVector3() throw();
  int32_t x;
  int32_t y;
  int32_t z;

  _TVector3__isset __isset;

  void __set_x(const int32_t val);

  void __set_y(const int32_t val);

  void __set_z(const int32_t val);

  bool operator == (const TVector3 & rhs) const
  {
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    if (!(z == rhs.z))
      return false;
    return true;
  }
  bool operator != (const TVector3 &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TVector3 & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TVector3 &a, TVector3 &b);

inline std::ostream& operator<<(std::ostream& out, const TVector3& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _TRotation__isset {
  _TRotation__isset() : x(false), y(false), z(false), w(false) {}
  bool x :1;
  bool y :1;
  bool z :1;
  bool w :1;
} _TRotation__isset;

class TRotation : public virtual ::apache::thrift::TBase {
 public:

  TRotation(const TRotation&);
  TRotation& operator=(const TRotation&);
  TRotation() : x(0), y(0), z(0), w(0) {
  }

  virtual ~TRotation() throw();
  int32_t x;
  int32_t y;
  int32_t z;
  int32_t w;

  _TRotation__isset __isset;

  void __set_x(const int32_t val);

  void __set_y(const int32_t val);

  void __set_z(const int32_t val);

  void __set_w(const int32_t val);

  bool operator == (const TRotation & rhs) const
  {
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    if (!(z == rhs.z))
      return false;
    if (!(w == rhs.w))
      return false;
    return true;
  }
  bool operator != (const TRotation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRotation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TRotation &a, TRotation &b);

inline std::ostream& operator<<(std::ostream& out, const TRotation& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Bounds__isset {
  _Bounds__isset() : center(false), size(false) {}
  bool center :1;
  bool size :1;
} _Bounds__isset;

class Bounds : public virtual ::apache::thrift::TBase {
 public:

  Bounds(const Bounds&);
  Bounds& operator=(const Bounds&);
  Bounds() {
  }

  virtual ~Bounds() throw();
  TVector3 center;
  TVector3 size;

  _Bounds__isset __isset;

  void __set_center(const TVector3& val);

  void __set_size(const TVector3& val);

  bool operator == (const Bounds & rhs) const
  {
    if (!(center == rhs.center))
      return false;
    if (!(size == rhs.size))
      return false;
    return true;
  }
  bool operator != (const Bounds &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Bounds & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Bounds &a, Bounds &b);

inline std::ostream& operator<<(std::ostream& out, const Bounds& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _PlayerOperateCommand__isset {
  _PlayerOperateCommand__isset() : uid(false), type(false), moveDir(false), argv1(false), argv2(false), argv3(false) {}
  bool uid :1;
  bool type :1;
  bool moveDir :1;
  bool argv1 :1;
  bool argv2 :1;
  bool argv3 :1;
} _PlayerOperateCommand__isset;

class PlayerOperateCommand : public virtual ::apache::thrift::TBase {
 public:

  PlayerOperateCommand(const PlayerOperateCommand&);
  PlayerOperateCommand& operator=(const PlayerOperateCommand&);
  PlayerOperateCommand() : uid(0), type((OperateCmdType::type)0), argv1(0), argv2(0), argv3(0) {
  }

  virtual ~PlayerOperateCommand() throw();
  int32_t uid;
  OperateCmdType::type type;
  TVector3 moveDir;
  int32_t argv1;
  int32_t argv2;
  int32_t argv3;

  _PlayerOperateCommand__isset __isset;

  void __set_uid(const int32_t val);

  void __set_type(const OperateCmdType::type val);

  void __set_moveDir(const TVector3& val);

  void __set_argv1(const int32_t val);

  void __set_argv2(const int32_t val);

  void __set_argv3(const int32_t val);

  bool operator == (const PlayerOperateCommand & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(moveDir == rhs.moveDir))
      return false;
    if (!(argv1 == rhs.argv1))
      return false;
    if (!(argv2 == rhs.argv2))
      return false;
    if (!(argv3 == rhs.argv3))
      return false;
    return true;
  }
  bool operator != (const PlayerOperateCommand &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlayerOperateCommand & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PlayerOperateCommand &a, PlayerOperateCommand &b);

inline std::ostream& operator<<(std::ostream& out, const PlayerOperateCommand& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _MovementData__isset {
  _MovementData__isset() : moveDir(false), facingDir(false) {}
  bool moveDir :1;
  bool facingDir :1;
} _MovementData__isset;

class MovementData : public virtual ::apache::thrift::TBase {
 public:

  MovementData(const MovementData&);
  MovementData& operator=(const MovementData&);
  MovementData() {
  }

  virtual ~MovementData() throw();
  TVector3 moveDir;
  TVector3 facingDir;

  _MovementData__isset __isset;

  void __set_moveDir(const TVector3& val);

  void __set_facingDir(const TVector3& val);

  bool operator == (const MovementData & rhs) const
  {
    if (!(moveDir == rhs.moveDir))
      return false;
    if (!(facingDir == rhs.facingDir))
      return false;
    return true;
  }
  bool operator != (const MovementData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MovementData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MovementData &a, MovementData &b);

inline std::ostream& operator<<(std::ostream& out, const MovementData& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _StateMaps__isset {
  _StateMaps__isset() : bools(false), ints(false), decimals(false), vectors(false) {}
  bool bools :1;
  bool ints :1;
  bool decimals :1;
  bool vectors :1;
} _StateMaps__isset;

class StateMaps : public virtual ::apache::thrift::TBase {
 public:

  StateMaps(const StateMaps&);
  StateMaps& operator=(const StateMaps&);
  StateMaps() {
  }

  virtual ~StateMaps() throw();
  std::map<int32_t, bool>  bools;
  std::map<int32_t, int32_t>  ints;
  std::map<int32_t, double>  decimals;
  std::map<int32_t, TVector3>  vectors;

  _StateMaps__isset __isset;

  void __set_bools(const std::map<int32_t, bool> & val);

  void __set_ints(const std::map<int32_t, int32_t> & val);

  void __set_decimals(const std::map<int32_t, double> & val);

  void __set_vectors(const std::map<int32_t, TVector3> & val);

  bool operator == (const StateMaps & rhs) const
  {
    if (!(bools == rhs.bools))
      return false;
    if (!(ints == rhs.ints))
      return false;
    if (!(decimals == rhs.decimals))
      return false;
    if (!(vectors == rhs.vectors))
      return false;
    return true;
  }
  bool operator != (const StateMaps &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StateMaps & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(StateMaps &a, StateMaps &b);

inline std::ostream& operator<<(std::ostream& out, const StateMaps& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _UnitSyncData__isset {
  _UnitSyncData__isset() : states(false) {}
  bool states :1;
} _UnitSyncData__isset;

class UnitSyncData : public virtual ::apache::thrift::TBase {
 public:

  UnitSyncData(const UnitSyncData&);
  UnitSyncData& operator=(const UnitSyncData&);
  UnitSyncData() {
  }

  virtual ~UnitSyncData() throw();
  StateMaps states;

  _UnitSyncData__isset __isset;

  void __set_states(const StateMaps& val);

  bool operator == (const UnitSyncData & rhs) const
  {
    if (!(states == rhs.states))
      return false;
    return true;
  }
  bool operator != (const UnitSyncData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UnitSyncData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UnitSyncData &a, UnitSyncData &b);

inline std::ostream& operator<<(std::ostream& out, const UnitSyncData& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Move__isset {
  _Move__isset() : pos(false), dir(false), rot(false) {}
  bool pos :1;
  bool dir :1;
  bool rot :1;
} _Move__isset;

class Move : public virtual ::apache::thrift::TBase {
 public:

  Move(const Move&);
  Move& operator=(const Move&);
  Move() {
  }

  virtual ~Move() throw();
  TVector3 pos;
  TVector3 dir;
  TRotation rot;

  _Move__isset __isset;

  void __set_pos(const TVector3& val);

  void __set_dir(const TVector3& val);

  void __set_rot(const TRotation& val);

  bool operator == (const Move & rhs) const
  {
    if (!(pos == rhs.pos))
      return false;
    if (!(dir == rhs.dir))
      return false;
    if (!(rot == rhs.rot))
      return false;
    return true;
  }
  bool operator != (const Move &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Move & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Move &a, Move &b);

inline std::ostream& operator<<(std::ostream& out, const Move& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _MoveStop__isset {
  _MoveStop__isset() : pos(false), rot(false) {}
  bool pos :1;
  bool rot :1;
} _MoveStop__isset;

class MoveStop : public virtual ::apache::thrift::TBase {
 public:

  MoveStop(const MoveStop&);
  MoveStop& operator=(const MoveStop&);
  MoveStop() {
  }

  virtual ~MoveStop() throw();
  TVector3 pos;
  TRotation rot;

  _MoveStop__isset __isset;

  void __set_pos(const TVector3& val);

  void __set_rot(const TRotation& val);

  bool operator == (const MoveStop & rhs) const
  {
    if (!(pos == rhs.pos))
      return false;
    if (!(rot == rhs.rot))
      return false;
    return true;
  }
  bool operator != (const MoveStop &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MoveStop & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MoveStop &a, MoveStop &b);

inline std::ostream& operator<<(std::ostream& out, const MoveStop& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _UseSkill__isset {
  _UseSkill__isset() : skillId(false), targetIds(false) {}
  bool skillId :1;
  bool targetIds :1;
} _UseSkill__isset;

class UseSkill : public virtual ::apache::thrift::TBase {
 public:

  UseSkill(const UseSkill&);
  UseSkill& operator=(const UseSkill&);
  UseSkill() : skillId(0) {
  }

  virtual ~UseSkill() throw();
  int32_t skillId;
  std::vector<int32_t>  targetIds;

  _UseSkill__isset __isset;

  void __set_skillId(const int32_t val);

  void __set_targetIds(const std::vector<int32_t> & val);

  bool operator == (const UseSkill & rhs) const
  {
    if (!(skillId == rhs.skillId))
      return false;
    if (!(targetIds == rhs.targetIds))
      return false;
    return true;
  }
  bool operator != (const UseSkill &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UseSkill & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UseSkill &a, UseSkill &b);

inline std::ostream& operator<<(std::ostream& out, const UseSkill& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _KillDead__isset {
  _KillDead__isset() : killerId(false) {}
  bool killerId :1;
} _KillDead__isset;

class KillDead : public virtual ::apache::thrift::TBase {
 public:

  KillDead(const KillDead&);
  KillDead& operator=(const KillDead&);
  KillDead() : killerId(0) {
  }

  virtual ~KillDead() throw();
  int32_t killerId;

  _KillDead__isset __isset;

  void __set_killerId(const int32_t val);

  bool operator == (const KillDead & rhs) const
  {
    if (!(killerId == rhs.killerId))
      return false;
    return true;
  }
  bool operator != (const KillDead &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KillDead & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(KillDead &a, KillDead &b);

inline std::ostream& operator<<(std::ostream& out, const KillDead& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Bullet__isset {
  _Bullet__isset() : uid(false), casterId(false), pos(false), dir(false) {}
  bool uid :1;
  bool casterId :1;
  bool pos :1;
  bool dir :1;
} _Bullet__isset;

class Bullet : public virtual ::apache::thrift::TBase {
 public:

  Bullet(const Bullet&);
  Bullet& operator=(const Bullet&);
  Bullet() : uid(0), casterId(0) {
  }

  virtual ~Bullet() throw();
  int32_t uid;
  int32_t casterId;
  TVector3 pos;
  TVector3 dir;

  _Bullet__isset __isset;

  void __set_uid(const int32_t val);

  void __set_casterId(const int32_t val);

  void __set_pos(const TVector3& val);

  void __set_dir(const TVector3& val);

  bool operator == (const Bullet & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(casterId == rhs.casterId))
      return false;
    if (!(pos == rhs.pos))
      return false;
    if (!(dir == rhs.dir))
      return false;
    return true;
  }
  bool operator != (const Bullet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Bullet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Bullet &a, Bullet &b);

inline std::ostream& operator<<(std::ostream& out, const Bullet& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SyncBullet__isset {
  _SyncBullet__isset() : bulletList(false) {}
  bool bulletList :1;
} _SyncBullet__isset;

class SyncBullet : public virtual ::apache::thrift::TBase {
 public:

  SyncBullet(const SyncBullet&);
  SyncBullet& operator=(const SyncBullet&);
  SyncBullet() {
  }

  virtual ~SyncBullet() throw();
  std::vector<Bullet>  bulletList;

  _SyncBullet__isset __isset;

  void __set_bulletList(const std::vector<Bullet> & val);

  bool operator == (const SyncBullet & rhs) const
  {
    if (!(bulletList == rhs.bulletList))
      return false;
    return true;
  }
  bool operator != (const SyncBullet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncBullet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SyncBullet &a, SyncBullet &b);

inline std::ostream& operator<<(std::ostream& out, const SyncBullet& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Line__isset {
  _Line__isset() : uid(false), casterId(false), points(false), isEnd(false), lineType(false) {}
  bool uid :1;
  bool casterId :1;
  bool points :1;
  bool isEnd :1;
  bool lineType :1;
} _Line__isset;

class Line : public virtual ::apache::thrift::TBase {
 public:

  Line(const Line&);
  Line& operator=(const Line&);
  Line() : uid(0), casterId(0), isEnd(0), lineType((LineType::type)0) {
  }

  virtual ~Line() throw();
  int32_t uid;
  int32_t casterId;
  std::vector<TVector3>  points;
  bool isEnd;
  LineType::type lineType;

  _Line__isset __isset;

  void __set_uid(const int32_t val);

  void __set_casterId(const int32_t val);

  void __set_points(const std::vector<TVector3> & val);

  void __set_isEnd(const bool val);

  void __set_lineType(const LineType::type val);

  bool operator == (const Line & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(casterId == rhs.casterId))
      return false;
    if (!(points == rhs.points))
      return false;
    if (!(isEnd == rhs.isEnd))
      return false;
    if (!(lineType == rhs.lineType))
      return false;
    return true;
  }
  bool operator != (const Line &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Line & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Line &a, Line &b);

inline std::ostream& operator<<(std::ostream& out, const Line& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Cage__isset {
  _Cage__isset() : uid(false), center(false), radius(false), captureTime(false) {}
  bool uid :1;
  bool center :1;
  bool radius :1;
  bool captureTime :1;
} _Cage__isset;

class Cage : public virtual ::apache::thrift::TBase {
 public:

  Cage(const Cage&);
  Cage& operator=(const Cage&);
  Cage() : uid(0), radius(0), captureTime(0) {
  }

  virtual ~Cage() throw();
  int32_t uid;
  TVector3 center;
  int32_t radius;
  int32_t captureTime;

  _Cage__isset __isset;

  void __set_uid(const int32_t val);

  void __set_center(const TVector3& val);

  void __set_radius(const int32_t val);

  void __set_captureTime(const int32_t val);

  bool operator == (const Cage & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(center == rhs.center))
      return false;
    if (!(radius == rhs.radius))
      return false;
    if (!(captureTime == rhs.captureTime))
      return false;
    return true;
  }
  bool operator != (const Cage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Cage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Cage &a, Cage &b);

inline std::ostream& operator<<(std::ostream& out, const Cage& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Revive__isset {
  _Revive__isset() : bornId(false), bornPos(false) {}
  bool bornId :1;
  bool bornPos :1;
} _Revive__isset;

class Revive : public virtual ::apache::thrift::TBase {
 public:

  Revive(const Revive&);
  Revive& operator=(const Revive&);
  Revive() : bornId(0) {
  }

  virtual ~Revive() throw();
  int32_t bornId;
  TVector3 bornPos;

  _Revive__isset __isset;

  void __set_bornId(const int32_t val);

  void __set_bornPos(const TVector3& val);

  bool operator == (const Revive & rhs) const
  {
    if (!(bornId == rhs.bornId))
      return false;
    if (!(bornPos == rhs.bornPos))
      return false;
    return true;
  }
  bool operator != (const Revive &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Revive & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Revive &a, Revive &b);

inline std::ostream& operator<<(std::ostream& out, const Revive& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SyncLine__isset {
  _SyncLine__isset() : lineList(false) {}
  bool lineList :1;
} _SyncLine__isset;

class SyncLine : public virtual ::apache::thrift::TBase {
 public:

  SyncLine(const SyncLine&);
  SyncLine& operator=(const SyncLine&);
  SyncLine() {
  }

  virtual ~SyncLine() throw();
  std::vector<Line>  lineList;

  _SyncLine__isset __isset;

  void __set_lineList(const std::vector<Line> & val);

  bool operator == (const SyncLine & rhs) const
  {
    if (!(lineList == rhs.lineList))
      return false;
    return true;
  }
  bool operator != (const SyncLine &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncLine & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SyncLine &a, SyncLine &b);

inline std::ostream& operator<<(std::ostream& out, const SyncLine& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _GetItem__isset {
  _GetItem__isset() : itemUid(false) {}
  bool itemUid :1;
} _GetItem__isset;

class GetItem : public virtual ::apache::thrift::TBase {
 public:

  GetItem(const GetItem&);
  GetItem& operator=(const GetItem&);
  GetItem() : itemUid(0) {
  }

  virtual ~GetItem() throw();
  int32_t itemUid;

  _GetItem__isset __isset;

  void __set_itemUid(const int32_t val);

  bool operator == (const GetItem & rhs) const
  {
    if (!(itemUid == rhs.itemUid))
      return false;
    return true;
  }
  bool operator != (const GetItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetItem &a, GetItem &b);

inline std::ostream& operator<<(std::ostream& out, const GetItem& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _AddBuff__isset {
  _AddBuff__isset() : id(false) {}
  bool id :1;
} _AddBuff__isset;

class AddBuff : public virtual ::apache::thrift::TBase {
 public:

  AddBuff(const AddBuff&);
  AddBuff& operator=(const AddBuff&);
  AddBuff() : id(0) {
  }

  virtual ~AddBuff() throw();
  int32_t id;

  _AddBuff__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const AddBuff & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const AddBuff &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AddBuff & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AddBuff &a, AddBuff &b);

inline std::ostream& operator<<(std::ostream& out, const AddBuff& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _DelBuff__isset {
  _DelBuff__isset() : id(false) {}
  bool id :1;
} _DelBuff__isset;

class DelBuff : public virtual ::apache::thrift::TBase {
 public:

  DelBuff(const DelBuff&);
  DelBuff& operator=(const DelBuff&);
  DelBuff() : id(0) {
  }

  virtual ~DelBuff() throw();
  int32_t id;

  _DelBuff__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const DelBuff & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const DelBuff &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DelBuff & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DelBuff &a, DelBuff &b);

inline std::ostream& operator<<(std::ostream& out, const DelBuff& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _TriggerMagic__isset {
  _TriggerMagic__isset() : magicId(false) {}
  bool magicId :1;
} _TriggerMagic__isset;

class TriggerMagic : public virtual ::apache::thrift::TBase {
 public:

  TriggerMagic(const TriggerMagic&);
  TriggerMagic& operator=(const TriggerMagic&);
  TriggerMagic() : magicId(0) {
  }

  virtual ~TriggerMagic() throw();
  int32_t magicId;

  _TriggerMagic__isset __isset;

  void __set_magicId(const int32_t val);

  bool operator == (const TriggerMagic & rhs) const
  {
    if (!(magicId == rhs.magicId))
      return false;
    return true;
  }
  bool operator != (const TriggerMagic &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TriggerMagic & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TriggerMagic &a, TriggerMagic &b);

inline std::ostream& operator<<(std::ostream& out, const TriggerMagic& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _DropSkill__isset {
  _DropSkill__isset() : skillId(false), isA(false) {}
  bool skillId :1;
  bool isA :1;
} _DropSkill__isset;

class DropSkill : public virtual ::apache::thrift::TBase {
 public:

  DropSkill(const DropSkill&);
  DropSkill& operator=(const DropSkill&);
  DropSkill() : skillId(0), isA(0) {
  }

  virtual ~DropSkill() throw();
  int32_t skillId;
  bool isA;

  _DropSkill__isset __isset;

  void __set_skillId(const int32_t val);

  void __set_isA(const bool val);

  bool operator == (const DropSkill & rhs) const
  {
    if (!(skillId == rhs.skillId))
      return false;
    if (!(isA == rhs.isA))
      return false;
    return true;
  }
  bool operator != (const DropSkill &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DropSkill & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DropSkill &a, DropSkill &b);

inline std::ostream& operator<<(std::ostream& out, const DropSkill& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _UseUltSkillStart__isset {
  _UseUltSkillStart__isset() : id(false) {}
  bool id :1;
} _UseUltSkillStart__isset;

class UseUltSkillStart : public virtual ::apache::thrift::TBase {
 public:

  UseUltSkillStart(const UseUltSkillStart&);
  UseUltSkillStart& operator=(const UseUltSkillStart&);
  UseUltSkillStart() : id(0) {
  }

  virtual ~UseUltSkillStart() throw();
  int32_t id;

  _UseUltSkillStart__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const UseUltSkillStart & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const UseUltSkillStart &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UseUltSkillStart & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UseUltSkillStart &a, UseUltSkillStart &b);

inline std::ostream& operator<<(std::ostream& out, const UseUltSkillStart& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _UseUltSkillSuccess__isset {
  _UseUltSkillSuccess__isset() : id(false), power(false), rot(false) {}
  bool id :1;
  bool power :1;
  bool rot :1;
} _UseUltSkillSuccess__isset;

class UseUltSkillSuccess : public virtual ::apache::thrift::TBase {
 public:

  UseUltSkillSuccess(const UseUltSkillSuccess&);
  UseUltSkillSuccess& operator=(const UseUltSkillSuccess&);
  UseUltSkillSuccess() : id(0), power(0) {
  }

  virtual ~UseUltSkillSuccess() throw();
  int32_t id;
  int32_t power;
  TRotation rot;

  _UseUltSkillSuccess__isset __isset;

  void __set_id(const int32_t val);

  void __set_power(const int32_t val);

  void __set_rot(const TRotation& val);

  bool operator == (const UseUltSkillSuccess & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(power == rhs.power))
      return false;
    if (!(rot == rhs.rot))
      return false;
    return true;
  }
  bool operator != (const UseUltSkillSuccess &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UseUltSkillSuccess & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UseUltSkillSuccess &a, UseUltSkillSuccess &b);

inline std::ostream& operator<<(std::ostream& out, const UseUltSkillSuccess& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _UseUltSkillFailed__isset {
  _UseUltSkillFailed__isset() : id(false) {}
  bool id :1;
} _UseUltSkillFailed__isset;

class UseUltSkillFailed : public virtual ::apache::thrift::TBase {
 public:

  UseUltSkillFailed(const UseUltSkillFailed&);
  UseUltSkillFailed& operator=(const UseUltSkillFailed&);
  UseUltSkillFailed() : id(0) {
  }

  virtual ~UseUltSkillFailed() throw();
  int32_t id;

  _UseUltSkillFailed__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const UseUltSkillFailed & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const UseUltSkillFailed &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UseUltSkillFailed & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UseUltSkillFailed &a, UseUltSkillFailed &b);

inline std::ostream& operator<<(std::ostream& out, const UseUltSkillFailed& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _UseUltSkillCancel__isset {
  _UseUltSkillCancel__isset() : id(false) {}
  bool id :1;
} _UseUltSkillCancel__isset;

class UseUltSkillCancel : public virtual ::apache::thrift::TBase {
 public:

  UseUltSkillCancel(const UseUltSkillCancel&);
  UseUltSkillCancel& operator=(const UseUltSkillCancel&);
  UseUltSkillCancel() : id(0) {
  }

  virtual ~UseUltSkillCancel() throw();
  int32_t id;

  _UseUltSkillCancel__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const UseUltSkillCancel & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const UseUltSkillCancel &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UseUltSkillCancel & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UseUltSkillCancel &a, UseUltSkillCancel &b);

inline std::ostream& operator<<(std::ostream& out, const UseUltSkillCancel& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _UseUltSkillTrigger__isset {
  _UseUltSkillTrigger__isset() : id(false), stage(false) {}
  bool id :1;
  bool stage :1;
} _UseUltSkillTrigger__isset;

class UseUltSkillTrigger : public virtual ::apache::thrift::TBase {
 public:

  UseUltSkillTrigger(const UseUltSkillTrigger&);
  UseUltSkillTrigger& operator=(const UseUltSkillTrigger&);
  UseUltSkillTrigger() : id(0), stage(0) {
  }

  virtual ~UseUltSkillTrigger() throw();
  int32_t id;
  int32_t stage;

  _UseUltSkillTrigger__isset __isset;

  void __set_id(const int32_t val);

  void __set_stage(const int32_t val);

  bool operator == (const UseUltSkillTrigger & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(stage == rhs.stage))
      return false;
    return true;
  }
  bool operator != (const UseUltSkillTrigger &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UseUltSkillTrigger & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UseUltSkillTrigger &a, UseUltSkillTrigger &b);

inline std::ostream& operator<<(std::ostream& out, const UseUltSkillTrigger& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _TagSuccess__isset {
  _TagSuccess__isset() : type(false), pos(false) {}
  bool type :1;
  bool pos :1;
} _TagSuccess__isset;

class TagSuccess : public virtual ::apache::thrift::TBase {
 public:

  TagSuccess(const TagSuccess&);
  TagSuccess& operator=(const TagSuccess&);
  TagSuccess() : type(0) {
  }

  virtual ~TagSuccess() throw();
  int32_t type;
  TVector3 pos;

  _TagSuccess__isset __isset;

  void __set_type(const int32_t val);

  void __set_pos(const TVector3& val);

  bool operator == (const TagSuccess & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(pos == rhs.pos))
      return false;
    return true;
  }
  bool operator != (const TagSuccess &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TagSuccess & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TagSuccess &a, TagSuccess &b);

inline std::ostream& operator<<(std::ostream& out, const TagSuccess& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SyncData__isset {
  _SyncData__isset() : uid(false), syncType(false), unitStatus(false), move(false), moveStop(false), userSkill(false), killDead(false), bullet(false), line(false), cage(false), revive(false), getItem(false), addBuff(false), delBuff(false), triggerMagic(false), dropSkill(false), useUltSkillStart(false), useUltSkillSuccess(false), useUltSkillFailed(false), useUltSkillCancel(false), useUltSkillTrigger(false), useTag(false) {}
  bool uid :1;
  bool syncType :1;
  bool unitStatus :1;
  bool move :1;
  bool moveStop :1;
  bool userSkill :1;
  bool killDead :1;
  bool bullet :1;
  bool line :1;
  bool cage :1;
  bool revive :1;
  bool getItem :1;
  bool addBuff :1;
  bool delBuff :1;
  bool triggerMagic :1;
  bool dropSkill :1;
  bool useUltSkillStart :1;
  bool useUltSkillSuccess :1;
  bool useUltSkillFailed :1;
  bool useUltSkillCancel :1;
  bool useUltSkillTrigger :1;
  bool useTag :1;
} _SyncData__isset;

class SyncData : public virtual ::apache::thrift::TBase {
 public:

  SyncData(const SyncData&);
  SyncData& operator=(const SyncData&);
  SyncData() : uid(0), syncType((SyncDataType::type)0) {
  }

  virtual ~SyncData() throw();
  int32_t uid;
  SyncDataType::type syncType;
  UnitSyncData unitStatus;
  Move move;
  MoveStop moveStop;
  UseSkill userSkill;
  KillDead killDead;
  SyncBullet bullet;
  SyncLine line;
  Cage cage;
  Revive revive;
  GetItem getItem;
  AddBuff addBuff;
  DelBuff delBuff;
  TriggerMagic triggerMagic;
  DropSkill dropSkill;
  UseUltSkillStart useUltSkillStart;
  UseUltSkillSuccess useUltSkillSuccess;
  UseUltSkillFailed useUltSkillFailed;
  UseUltSkillCancel useUltSkillCancel;
  UseUltSkillTrigger useUltSkillTrigger;
  TagSuccess useTag;

  _SyncData__isset __isset;

  void __set_uid(const int32_t val);

  void __set_syncType(const SyncDataType::type val);

  void __set_unitStatus(const UnitSyncData& val);

  void __set_move(const Move& val);

  void __set_moveStop(const MoveStop& val);

  void __set_userSkill(const UseSkill& val);

  void __set_killDead(const KillDead& val);

  void __set_bullet(const SyncBullet& val);

  void __set_line(const SyncLine& val);

  void __set_cage(const Cage& val);

  void __set_revive(const Revive& val);

  void __set_getItem(const GetItem& val);

  void __set_addBuff(const AddBuff& val);

  void __set_delBuff(const DelBuff& val);

  void __set_triggerMagic(const TriggerMagic& val);

  void __set_dropSkill(const DropSkill& val);

  void __set_useUltSkillStart(const UseUltSkillStart& val);

  void __set_useUltSkillSuccess(const UseUltSkillSuccess& val);

  void __set_useUltSkillFailed(const UseUltSkillFailed& val);

  void __set_useUltSkillCancel(const UseUltSkillCancel& val);

  void __set_useUltSkillTrigger(const UseUltSkillTrigger& val);

  void __set_useTag(const TagSuccess& val);

  bool operator == (const SyncData & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(syncType == rhs.syncType))
      return false;
    if (__isset.unitStatus != rhs.__isset.unitStatus)
      return false;
    else if (__isset.unitStatus && !(unitStatus == rhs.unitStatus))
      return false;
    if (__isset.move != rhs.__isset.move)
      return false;
    else if (__isset.move && !(move == rhs.move))
      return false;
    if (__isset.moveStop != rhs.__isset.moveStop)
      return false;
    else if (__isset.moveStop && !(moveStop == rhs.moveStop))
      return false;
    if (__isset.userSkill != rhs.__isset.userSkill)
      return false;
    else if (__isset.userSkill && !(userSkill == rhs.userSkill))
      return false;
    if (__isset.killDead != rhs.__isset.killDead)
      return false;
    else if (__isset.killDead && !(killDead == rhs.killDead))
      return false;
    if (__isset.bullet != rhs.__isset.bullet)
      return false;
    else if (__isset.bullet && !(bullet == rhs.bullet))
      return false;
    if (__isset.line != rhs.__isset.line)
      return false;
    else if (__isset.line && !(line == rhs.line))
      return false;
    if (__isset.cage != rhs.__isset.cage)
      return false;
    else if (__isset.cage && !(cage == rhs.cage))
      return false;
    if (__isset.revive != rhs.__isset.revive)
      return false;
    else if (__isset.revive && !(revive == rhs.revive))
      return false;
    if (__isset.getItem != rhs.__isset.getItem)
      return false;
    else if (__isset.getItem && !(getItem == rhs.getItem))
      return false;
    if (__isset.addBuff != rhs.__isset.addBuff)
      return false;
    else if (__isset.addBuff && !(addBuff == rhs.addBuff))
      return false;
    if (__isset.delBuff != rhs.__isset.delBuff)
      return false;
    else if (__isset.delBuff && !(delBuff == rhs.delBuff))
      return false;
    if (__isset.triggerMagic != rhs.__isset.triggerMagic)
      return false;
    else if (__isset.triggerMagic && !(triggerMagic == rhs.triggerMagic))
      return false;
    if (__isset.dropSkill != rhs.__isset.dropSkill)
      return false;
    else if (__isset.dropSkill && !(dropSkill == rhs.dropSkill))
      return false;
    if (__isset.useUltSkillStart != rhs.__isset.useUltSkillStart)
      return false;
    else if (__isset.useUltSkillStart && !(useUltSkillStart == rhs.useUltSkillStart))
      return false;
    if (__isset.useUltSkillSuccess != rhs.__isset.useUltSkillSuccess)
      return false;
    else if (__isset.useUltSkillSuccess && !(useUltSkillSuccess == rhs.useUltSkillSuccess))
      return false;
    if (__isset.useUltSkillFailed != rhs.__isset.useUltSkillFailed)
      return false;
    else if (__isset.useUltSkillFailed && !(useUltSkillFailed == rhs.useUltSkillFailed))
      return false;
    if (__isset.useUltSkillCancel != rhs.__isset.useUltSkillCancel)
      return false;
    else if (__isset.useUltSkillCancel && !(useUltSkillCancel == rhs.useUltSkillCancel))
      return false;
    if (__isset.useUltSkillTrigger != rhs.__isset.useUltSkillTrigger)
      return false;
    else if (__isset.useUltSkillTrigger && !(useUltSkillTrigger == rhs.useUltSkillTrigger))
      return false;
    if (__isset.useTag != rhs.__isset.useTag)
      return false;
    else if (__isset.useTag && !(useTag == rhs.useTag))
      return false;
    return true;
  }
  bool operator != (const SyncData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SyncData &a, SyncData &b);

inline std::ostream& operator<<(std::ostream& out, const SyncData& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _PlayerData__isset {
  _PlayerData__isset() : userId(false), nickname(false), faction(false), classType(false), shipId(false), position(false), playerId(false), shipLevel(false), skillSlotCount(false), uniqueSkills(false), bulletCount(false) {}
  bool userId :1;
  bool nickname :1;
  bool faction :1;
  bool classType :1;
  bool shipId :1;
  bool position :1;
  bool playerId :1;
  bool shipLevel :1;
  bool skillSlotCount :1;
  bool uniqueSkills :1;
  bool bulletCount :1;
} _PlayerData__isset;

class PlayerData : public virtual ::apache::thrift::TBase {
 public:

  PlayerData(const PlayerData&);
  PlayerData& operator=(const PlayerData&);
  PlayerData() : userId(0), nickname(), faction(0), classType((ClassType::type)0), shipId(0), position(0), playerId(0), shipLevel(0), skillSlotCount(0), bulletCount(0) {
  }

  virtual ~PlayerData() throw();
  int32_t userId;
  std::string nickname;
  int32_t faction;
  ClassType::type classType;
  int32_t shipId;
  int32_t position;
  int32_t playerId;
  int32_t shipLevel;
  int32_t skillSlotCount;
  std::vector<int32_t>  uniqueSkills;
  int32_t bulletCount;

  _PlayerData__isset __isset;

  void __set_userId(const int32_t val);

  void __set_nickname(const std::string& val);

  void __set_faction(const int32_t val);

  void __set_classType(const ClassType::type val);

  void __set_shipId(const int32_t val);

  void __set_position(const int32_t val);

  void __set_playerId(const int32_t val);

  void __set_shipLevel(const int32_t val);

  void __set_skillSlotCount(const int32_t val);

  void __set_uniqueSkills(const std::vector<int32_t> & val);

  void __set_bulletCount(const int32_t val);

  bool operator == (const PlayerData & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    if (!(nickname == rhs.nickname))
      return false;
    if (!(faction == rhs.faction))
      return false;
    if (!(classType == rhs.classType))
      return false;
    if (!(shipId == rhs.shipId))
      return false;
    if (!(position == rhs.position))
      return false;
    if (!(playerId == rhs.playerId))
      return false;
    if (!(shipLevel == rhs.shipLevel))
      return false;
    if (!(skillSlotCount == rhs.skillSlotCount))
      return false;
    if (!(uniqueSkills == rhs.uniqueSkills))
      return false;
    if (!(bulletCount == rhs.bulletCount))
      return false;
    return true;
  }
  bool operator != (const PlayerData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PlayerData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PlayerData &a, PlayerData &b);

inline std::ostream& operator<<(std::ostream& out, const PlayerData& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _RoleData__isset {
  _RoleData__isset() : shipId(false), shipConfigId(false) {}
  bool shipId :1;
  bool shipConfigId :1;
} _RoleData__isset;

class RoleData : public virtual ::apache::thrift::TBase {
 public:

  RoleData(const RoleData&);
  RoleData& operator=(const RoleData&);
  RoleData() : shipId(0), shipConfigId(0) {
  }

  virtual ~RoleData() throw();
  int32_t shipId;
  int32_t shipConfigId;

  _RoleData__isset __isset;

  void __set_shipId(const int32_t val);

  void __set_shipConfigId(const int32_t val);

  bool operator == (const RoleData & rhs) const
  {
    if (!(shipId == rhs.shipId))
      return false;
    if (!(shipConfigId == rhs.shipConfigId))
      return false;
    return true;
  }
  bool operator != (const RoleData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RoleData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RoleData &a, RoleData &b);

inline std::ostream& operator<<(std::ostream& out, const RoleData& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _UserData__isset {
  _UserData__isset() : userId(false), userAccount(false), userPassword(false), roleData(false) {}
  bool userId :1;
  bool userAccount :1;
  bool userPassword :1;
  bool roleData :1;
} _UserData__isset;

class UserData : public virtual ::apache::thrift::TBase {
 public:

  UserData(const UserData&);
  UserData& operator=(const UserData&);
  UserData() : userId(0), userAccount(), userPassword() {
  }

  virtual ~UserData() throw();
  int32_t userId;
  std::string userAccount;
  std::string userPassword;
  RoleData roleData;

  _UserData__isset __isset;

  void __set_userId(const int32_t val);

  void __set_userAccount(const std::string& val);

  void __set_userPassword(const std::string& val);

  void __set_roleData(const RoleData& val);

  bool operator == (const UserData & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    if (!(userAccount == rhs.userAccount))
      return false;
    if (!(userPassword == rhs.userPassword))
      return false;
    if (!(roleData == rhs.roleData))
      return false;
    return true;
  }
  bool operator != (const UserData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UserData &a, UserData &b);

inline std::ostream& operator<<(std::ostream& out, const UserData& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _AccountData__isset {
  _AccountData__isset() : id(false), sessionKey(false), channel(false), openId(false), lastLoginTime(false) {}
  bool id :1;
  bool sessionKey :1;
  bool channel :1;
  bool openId :1;
  bool lastLoginTime :1;
} _AccountData__isset;

class AccountData : public virtual ::apache::thrift::TBase {
 public:

  AccountData(const AccountData&);
  AccountData& operator=(const AccountData&);
  AccountData() : id(0), sessionKey(), channel(), openId(), lastLoginTime(0) {
  }

  virtual ~AccountData() throw();
  int32_t id;
  std::string sessionKey;
  std::string channel;
  std::string openId;
  int64_t lastLoginTime;

  _AccountData__isset __isset;

  void __set_id(const int32_t val);

  void __set_sessionKey(const std::string& val);

  void __set_channel(const std::string& val);

  void __set_openId(const std::string& val);

  void __set_lastLoginTime(const int64_t val);

  bool operator == (const AccountData & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(sessionKey == rhs.sessionKey))
      return false;
    if (!(channel == rhs.channel))
      return false;
    if (!(openId == rhs.openId))
      return false;
    if (!(lastLoginTime == rhs.lastLoginTime))
      return false;
    return true;
  }
  bool operator != (const AccountData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AccountData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AccountData &a, AccountData &b);

inline std::ostream& operator<<(std::ostream& out, const AccountData& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _InstantiateData__isset {
  _InstantiateData__isset() : uid(false), creator(false), type(false), pos(false), rot(false), argvs(false), casterPos(false) {}
  bool uid :1;
  bool creator :1;
  bool type :1;
  bool pos :1;
  bool rot :1;
  bool argvs :1;
  bool casterPos :1;
} _InstantiateData__isset;

class InstantiateData : public virtual ::apache::thrift::TBase {
 public:

  InstantiateData(const InstantiateData&);
  InstantiateData& operator=(const InstantiateData&);
  InstantiateData() : uid(0), creator(0), type((ObjType::type)0) {
  }

  virtual ~InstantiateData() throw();
  int32_t uid;
  int32_t creator;
  ObjType::type type;
  TVector3 pos;
  TRotation rot;
  std::vector<int32_t>  argvs;
  TVector3 casterPos;

  _InstantiateData__isset __isset;

  void __set_uid(const int32_t val);

  void __set_creator(const int32_t val);

  void __set_type(const ObjType::type val);

  void __set_pos(const TVector3& val);

  void __set_rot(const TRotation& val);

  void __set_argvs(const std::vector<int32_t> & val);

  void __set_casterPos(const TVector3& val);

  bool operator == (const InstantiateData & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(creator == rhs.creator))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(pos == rhs.pos))
      return false;
    if (!(rot == rhs.rot))
      return false;
    if (!(argvs == rhs.argvs))
      return false;
    if (!(casterPos == rhs.casterPos))
      return false;
    return true;
  }
  bool operator != (const InstantiateData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InstantiateData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(InstantiateData &a, InstantiateData &b);

inline std::ostream& operator<<(std::ostream& out, const InstantiateData& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _RoomData__isset {
  _RoomData__isset() : id(false), name(false), pattern(false), playerCount(false), playerMaxCount(false) {}
  bool id :1;
  bool name :1;
  bool pattern :1;
  bool playerCount :1;
  bool playerMaxCount :1;
} _RoomData__isset;

class RoomData : public virtual ::apache::thrift::TBase {
 public:

  RoomData(const RoomData&);
  RoomData& operator=(const RoomData&);
  RoomData() : id(0), name(), pattern(0), playerCount(0), playerMaxCount(0) {
  }

  virtual ~RoomData() throw();
  int32_t id;
  std::string name;
  int32_t pattern;
  int32_t playerCount;
  int32_t playerMaxCount;

  _RoomData__isset __isset;

  void __set_id(const int32_t val);

  void __set_name(const std::string& val);

  void __set_pattern(const int32_t val);

  void __set_playerCount(const int32_t val);

  void __set_playerMaxCount(const int32_t val);

  bool operator == (const RoomData & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(pattern == rhs.pattern))
      return false;
    if (!(playerCount == rhs.playerCount))
      return false;
    if (!(playerMaxCount == rhs.playerMaxCount))
      return false;
    return true;
  }
  bool operator != (const RoomData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RoomData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RoomData &a, RoomData &b);

inline std::ostream& operator<<(std::ostream& out, const RoomData& obj)
{
  obj.printTo(out);
  return out;
}



#endif
