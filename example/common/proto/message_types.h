/**
 * Autogenerated by Thrift Compiler (@PACKAGE_VERSION@)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef message_TYPES_H
#define message_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "struct_types.h"




struct MessageId {
  enum type {
    C_LoginGame = 84213765,
    S_LoginGame = 117768197,
    SC_Connect = 67764230,
    SC_DisConnect = 67764232,
    CS_CreateRoom = 487063553,
    SC_CreateRoom = 503840769,
    CS_JoinRoom = 487063554,
    SC_JoinRoom = 503840770,
    SC_RoomInfo = 503840771,
    CS_SwitchSeat = 487063556,
    SC_SwitchSeat = 503840772,
    CS_ExitRoom = 487063557,
    SC_ExitRoom = 503840773,
    SC_RoomDestroyed = 503840774,
    CS_StartBattle = 487063559,
    SC_BeginLoadResource = 503840775,
    CS_EndLoadResource = 487063560,
    SC_StartBattle = 503840776,
    SC_BattleResult = 503840777,
    CS_EndBattle = 487063562,
    SC_EndBattle = 503840778,
    SC_ServerInfo = 503840779,
    CS_RequestRoomList = 487063564,
    SC_RequestRoomList = 503840780,
    CS_SwitchShip = 487063565,
    SC_SwitchShip = 503840781,
    CS_SwitchSlot = 487063566,
    SC_SwitchSlot = 503840782,
    CS_PlayerInput = 487391233,
    SC_PlayerInput = 504168449,
    CS_SyncCommandMsg = 487391234,
    SC_SyncCommandMsg = 504168450,
    SC_Instantiate = 504168451,
    SC_FactionMsg = 504168452,
    CS_Ping = 487391237,
    SC_Ping = 504168453
  };
};

extern const std::map<int, const char*> _MessageId_VALUES_TO_NAMES;

class CLoginGame;

class SLoginGame;

class CSCreateRoom;

class SCCreateRoom;

class CSRequestRoomList;

class SCRequestRoomList;

class CSJoinRoom;

class SCJoinRoom;

class SCRoomInfo;

class CSSwitchSeat;

class SCSwitchSeat;

class CSSwitchShip;

class SCSwitchShip;

class CSSwitchSlot;

class SCSwitchSlot;

class CSExitRoom;

class SCExitRoom;

class SCRoomDestroyed;

class CSStartBattle;

class SCBeginLoadResource;

class CSEndLoadResource;

class SCStartBattle;

class SCBattleResult;

class CSEndBattle;

class SCEndBattle;

class CSPlayerInput;

class SCPlayerInput;

class CSSyncCommandMsg;

class SCSyncCommandMsg;

class SCInstantiate;

class CSPing;

class SCPing;

class SCServerInfo;

class SCFactionMsg;

typedef struct _CLoginGame__isset {
  _CLoginGame__isset() : accountId(false), sessionKey(false) {}
  bool accountId :1;
  bool sessionKey :1;
} _CLoginGame__isset;

class CLoginGame : public virtual ::apache::thrift::TBase {
 public:

  CLoginGame(const CLoginGame&);
  CLoginGame& operator=(const CLoginGame&);
  CLoginGame() : accountId(0), sessionKey() {
  }

  virtual ~CLoginGame() throw();
  int32_t accountId;
  std::string sessionKey;

  _CLoginGame__isset __isset;

  void __set_accountId(const int32_t val);

  void __set_sessionKey(const std::string& val);

  bool operator == (const CLoginGame & rhs) const
  {
    if (!(accountId == rhs.accountId))
      return false;
    if (!(sessionKey == rhs.sessionKey))
      return false;
    return true;
  }
  bool operator != (const CLoginGame &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CLoginGame & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CLoginGame &a, CLoginGame &b);

inline std::ostream& operator<<(std::ostream& out, const CLoginGame& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SLoginGame__isset {
  _SLoginGame__isset() : state(false), error(false), account(false) {}
  bool state :1;
  bool error :1;
  bool account :1;
} _SLoginGame__isset;

class SLoginGame : public virtual ::apache::thrift::TBase {
 public:

  SLoginGame(const SLoginGame&);
  SLoginGame& operator=(const SLoginGame&);
  SLoginGame() : state(0), error() {
  }

  virtual ~SLoginGame() throw();
  bool state;
  std::string error;
   ::AccountData account;

  _SLoginGame__isset __isset;

  void __set_state(const bool val);

  void __set_error(const std::string& val);

  void __set_account(const  ::AccountData& val);

  bool operator == (const SLoginGame & rhs) const
  {
    if (!(state == rhs.state))
      return false;
    if (__isset.error != rhs.__isset.error)
      return false;
    else if (__isset.error && !(error == rhs.error))
      return false;
    if (__isset.account != rhs.__isset.account)
      return false;
    else if (__isset.account && !(account == rhs.account))
      return false;
    return true;
  }
  bool operator != (const SLoginGame &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SLoginGame & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SLoginGame &a, SLoginGame &b);

inline std::ostream& operator<<(std::ostream& out, const SLoginGame& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CSCreateRoom__isset {
  _CSCreateRoom__isset() : playerCount(false), matchPattern(false) {}
  bool playerCount :1;
  bool matchPattern :1;
} _CSCreateRoom__isset;

class CSCreateRoom : public virtual ::apache::thrift::TBase {
 public:

  CSCreateRoom(const CSCreateRoom&);
  CSCreateRoom& operator=(const CSCreateRoom&);
  CSCreateRoom() : playerCount(0), matchPattern(0) {
  }

  virtual ~CSCreateRoom() throw();
  int32_t playerCount;
  int32_t matchPattern;

  _CSCreateRoom__isset __isset;

  void __set_playerCount(const int32_t val);

  void __set_matchPattern(const int32_t val);

  bool operator == (const CSCreateRoom & rhs) const
  {
    if (!(playerCount == rhs.playerCount))
      return false;
    if (!(matchPattern == rhs.matchPattern))
      return false;
    return true;
  }
  bool operator != (const CSCreateRoom &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSCreateRoom & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSCreateRoom &a, CSCreateRoom &b);

inline std::ostream& operator<<(std::ostream& out, const CSCreateRoom& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCCreateRoom__isset {
  _SCCreateRoom__isset() : result(false) {}
  bool result :1;
} _SCCreateRoom__isset;

class SCCreateRoom : public virtual ::apache::thrift::TBase {
 public:

  SCCreateRoom(const SCCreateRoom&);
  SCCreateRoom& operator=(const SCCreateRoom&);
  SCCreateRoom() : result(0) {
  }

  virtual ~SCCreateRoom() throw();
  int32_t result;

  _SCCreateRoom__isset __isset;

  void __set_result(const int32_t val);

  bool operator == (const SCCreateRoom & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const SCCreateRoom &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCCreateRoom & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCCreateRoom &a, SCCreateRoom &b);

inline std::ostream& operator<<(std::ostream& out, const SCCreateRoom& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CSRequestRoomList__isset {
  _CSRequestRoomList__isset() : pattern(false), pageNum(false), countPerPage(false) {}
  bool pattern :1;
  bool pageNum :1;
  bool countPerPage :1;
} _CSRequestRoomList__isset;

class CSRequestRoomList : public virtual ::apache::thrift::TBase {
 public:

  CSRequestRoomList(const CSRequestRoomList&);
  CSRequestRoomList& operator=(const CSRequestRoomList&);
  CSRequestRoomList() : pattern(0), pageNum(0), countPerPage(0) {
  }

  virtual ~CSRequestRoomList() throw();
  int32_t pattern;
  int32_t pageNum;
  int32_t countPerPage;

  _CSRequestRoomList__isset __isset;

  void __set_pattern(const int32_t val);

  void __set_pageNum(const int32_t val);

  void __set_countPerPage(const int32_t val);

  bool operator == (const CSRequestRoomList & rhs) const
  {
    if (!(pattern == rhs.pattern))
      return false;
    if (!(pageNum == rhs.pageNum))
      return false;
    if (!(countPerPage == rhs.countPerPage))
      return false;
    return true;
  }
  bool operator != (const CSRequestRoomList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSRequestRoomList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSRequestRoomList &a, CSRequestRoomList &b);

inline std::ostream& operator<<(std::ostream& out, const CSRequestRoomList& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCRequestRoomList__isset {
  _SCRequestRoomList__isset() : result(false), roomCount(false), roomList(false) {}
  bool result :1;
  bool roomCount :1;
  bool roomList :1;
} _SCRequestRoomList__isset;

class SCRequestRoomList : public virtual ::apache::thrift::TBase {
 public:

  SCRequestRoomList(const SCRequestRoomList&);
  SCRequestRoomList& operator=(const SCRequestRoomList&);
  SCRequestRoomList() : result(0), roomCount(0) {
  }

  virtual ~SCRequestRoomList() throw();
  int32_t result;
  int32_t roomCount;
  std::vector< ::RoomData>  roomList;

  _SCRequestRoomList__isset __isset;

  void __set_result(const int32_t val);

  void __set_roomCount(const int32_t val);

  void __set_roomList(const std::vector< ::RoomData> & val);

  bool operator == (const SCRequestRoomList & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    if (!(roomCount == rhs.roomCount))
      return false;
    if (!(roomList == rhs.roomList))
      return false;
    return true;
  }
  bool operator != (const SCRequestRoomList &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCRequestRoomList & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCRequestRoomList &a, SCRequestRoomList &b);

inline std::ostream& operator<<(std::ostream& out, const SCRequestRoomList& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CSJoinRoom__isset {
  _CSJoinRoom__isset() : roomId(false) {}
  bool roomId :1;
} _CSJoinRoom__isset;

class CSJoinRoom : public virtual ::apache::thrift::TBase {
 public:

  CSJoinRoom(const CSJoinRoom&);
  CSJoinRoom& operator=(const CSJoinRoom&);
  CSJoinRoom() : roomId(0) {
  }

  virtual ~CSJoinRoom() throw();
  int32_t roomId;

  _CSJoinRoom__isset __isset;

  void __set_roomId(const int32_t val);

  bool operator == (const CSJoinRoom & rhs) const
  {
    if (!(roomId == rhs.roomId))
      return false;
    return true;
  }
  bool operator != (const CSJoinRoom &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSJoinRoom & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSJoinRoom &a, CSJoinRoom &b);

inline std::ostream& operator<<(std::ostream& out, const CSJoinRoom& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCJoinRoom__isset {
  _SCJoinRoom__isset() : result(false) {}
  bool result :1;
} _SCJoinRoom__isset;

class SCJoinRoom : public virtual ::apache::thrift::TBase {
 public:

  SCJoinRoom(const SCJoinRoom&);
  SCJoinRoom& operator=(const SCJoinRoom&);
  SCJoinRoom() : result(0) {
  }

  virtual ~SCJoinRoom() throw();
  int32_t result;

  _SCJoinRoom__isset __isset;

  void __set_result(const int32_t val);

  bool operator == (const SCJoinRoom & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const SCJoinRoom &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCJoinRoom & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCJoinRoom &a, SCJoinRoom &b);

inline std::ostream& operator<<(std::ostream& out, const SCJoinRoom& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCRoomInfo__isset {
  _SCRoomInfo__isset() : roomId(false), masterId(false), playerList(false), roomSize(false), mathPattern(false) {}
  bool roomId :1;
  bool masterId :1;
  bool playerList :1;
  bool roomSize :1;
  bool mathPattern :1;
} _SCRoomInfo__isset;

class SCRoomInfo : public virtual ::apache::thrift::TBase {
 public:

  SCRoomInfo(const SCRoomInfo&);
  SCRoomInfo& operator=(const SCRoomInfo&);
  SCRoomInfo() : roomId(0), masterId(0), roomSize(0), mathPattern(0) {
  }

  virtual ~SCRoomInfo() throw();
  int32_t roomId;
  int32_t masterId;
  std::vector< ::PlayerData>  playerList;
  int32_t roomSize;
  int32_t mathPattern;

  _SCRoomInfo__isset __isset;

  void __set_roomId(const int32_t val);

  void __set_masterId(const int32_t val);

  void __set_playerList(const std::vector< ::PlayerData> & val);

  void __set_roomSize(const int32_t val);

  void __set_mathPattern(const int32_t val);

  bool operator == (const SCRoomInfo & rhs) const
  {
    if (!(roomId == rhs.roomId))
      return false;
    if (!(masterId == rhs.masterId))
      return false;
    if (!(playerList == rhs.playerList))
      return false;
    if (!(roomSize == rhs.roomSize))
      return false;
    if (!(mathPattern == rhs.mathPattern))
      return false;
    return true;
  }
  bool operator != (const SCRoomInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCRoomInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCRoomInfo &a, SCRoomInfo &b);

inline std::ostream& operator<<(std::ostream& out, const SCRoomInfo& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CSSwitchSeat__isset {
  _CSSwitchSeat__isset() : playerId(false), targetPos(false) {}
  bool playerId :1;
  bool targetPos :1;
} _CSSwitchSeat__isset;

class CSSwitchSeat : public virtual ::apache::thrift::TBase {
 public:

  CSSwitchSeat(const CSSwitchSeat&);
  CSSwitchSeat& operator=(const CSSwitchSeat&);
  CSSwitchSeat() : playerId(0), targetPos(0) {
  }

  virtual ~CSSwitchSeat() throw();
  int32_t playerId;
  int32_t targetPos;

  _CSSwitchSeat__isset __isset;

  void __set_playerId(const int32_t val);

  void __set_targetPos(const int32_t val);

  bool operator == (const CSSwitchSeat & rhs) const
  {
    if (!(playerId == rhs.playerId))
      return false;
    if (!(targetPos == rhs.targetPos))
      return false;
    return true;
  }
  bool operator != (const CSSwitchSeat &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSSwitchSeat & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSSwitchSeat &a, CSSwitchSeat &b);

inline std::ostream& operator<<(std::ostream& out, const CSSwitchSeat& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCSwitchSeat__isset {
  _SCSwitchSeat__isset() : result(false) {}
  bool result :1;
} _SCSwitchSeat__isset;

class SCSwitchSeat : public virtual ::apache::thrift::TBase {
 public:

  SCSwitchSeat(const SCSwitchSeat&);
  SCSwitchSeat& operator=(const SCSwitchSeat&);
  SCSwitchSeat() : result(0) {
  }

  virtual ~SCSwitchSeat() throw();
  int32_t result;

  _SCSwitchSeat__isset __isset;

  void __set_result(const int32_t val);

  bool operator == (const SCSwitchSeat & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const SCSwitchSeat &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCSwitchSeat & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCSwitchSeat &a, SCSwitchSeat &b);

inline std::ostream& operator<<(std::ostream& out, const SCSwitchSeat& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CSSwitchShip__isset {
  _CSSwitchShip__isset() : shipId(false) {}
  bool shipId :1;
} _CSSwitchShip__isset;

class CSSwitchShip : public virtual ::apache::thrift::TBase {
 public:

  CSSwitchShip(const CSSwitchShip&);
  CSSwitchShip& operator=(const CSSwitchShip&);
  CSSwitchShip() : shipId(0) {
  }

  virtual ~CSSwitchShip() throw();
  int32_t shipId;

  _CSSwitchShip__isset __isset;

  void __set_shipId(const int32_t val);

  bool operator == (const CSSwitchShip & rhs) const
  {
    if (!(shipId == rhs.shipId))
      return false;
    return true;
  }
  bool operator != (const CSSwitchShip &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSSwitchShip & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSSwitchShip &a, CSSwitchShip &b);

inline std::ostream& operator<<(std::ostream& out, const CSSwitchShip& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCSwitchShip__isset {
  _SCSwitchShip__isset() : result(false) {}
  bool result :1;
} _SCSwitchShip__isset;

class SCSwitchShip : public virtual ::apache::thrift::TBase {
 public:

  SCSwitchShip(const SCSwitchShip&);
  SCSwitchShip& operator=(const SCSwitchShip&);
  SCSwitchShip() : result(0) {
  }

  virtual ~SCSwitchShip() throw();
  int32_t result;

  _SCSwitchShip__isset __isset;

  void __set_result(const int32_t val);

  bool operator == (const SCSwitchShip & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const SCSwitchShip &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCSwitchShip & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCSwitchShip &a, SCSwitchShip &b);

inline std::ostream& operator<<(std::ostream& out, const SCSwitchShip& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CSSwitchSlot__isset {
  _CSSwitchSlot__isset() : slotCount(false), uniqueSkills(false), bulletCount(false) {}
  bool slotCount :1;
  bool uniqueSkills :1;
  bool bulletCount :1;
} _CSSwitchSlot__isset;

class CSSwitchSlot : public virtual ::apache::thrift::TBase {
 public:

  CSSwitchSlot(const CSSwitchSlot&);
  CSSwitchSlot& operator=(const CSSwitchSlot&);
  CSSwitchSlot() : slotCount(0), bulletCount(0) {
  }

  virtual ~CSSwitchSlot() throw();
  int32_t slotCount;
  std::vector<int32_t>  uniqueSkills;
  int32_t bulletCount;

  _CSSwitchSlot__isset __isset;

  void __set_slotCount(const int32_t val);

  void __set_uniqueSkills(const std::vector<int32_t> & val);

  void __set_bulletCount(const int32_t val);

  bool operator == (const CSSwitchSlot & rhs) const
  {
    if (!(slotCount == rhs.slotCount))
      return false;
    if (!(uniqueSkills == rhs.uniqueSkills))
      return false;
    if (!(bulletCount == rhs.bulletCount))
      return false;
    return true;
  }
  bool operator != (const CSSwitchSlot &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSSwitchSlot & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSSwitchSlot &a, CSSwitchSlot &b);

inline std::ostream& operator<<(std::ostream& out, const CSSwitchSlot& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCSwitchSlot__isset {
  _SCSwitchSlot__isset() : result(false) {}
  bool result :1;
} _SCSwitchSlot__isset;

class SCSwitchSlot : public virtual ::apache::thrift::TBase {
 public:

  SCSwitchSlot(const SCSwitchSlot&);
  SCSwitchSlot& operator=(const SCSwitchSlot&);
  SCSwitchSlot() : result(0) {
  }

  virtual ~SCSwitchSlot() throw();
  int32_t result;

  _SCSwitchSlot__isset __isset;

  void __set_result(const int32_t val);

  bool operator == (const SCSwitchSlot & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const SCSwitchSlot &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCSwitchSlot & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCSwitchSlot &a, SCSwitchSlot &b);

inline std::ostream& operator<<(std::ostream& out, const SCSwitchSlot& obj)
{
  obj.printTo(out);
  return out;
}


class CSExitRoom : public virtual ::apache::thrift::TBase {
 public:

  CSExitRoom(const CSExitRoom&);
  CSExitRoom& operator=(const CSExitRoom&);
  CSExitRoom() {
  }

  virtual ~CSExitRoom() throw();

  bool operator == (const CSExitRoom & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CSExitRoom &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSExitRoom & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSExitRoom &a, CSExitRoom &b);

inline std::ostream& operator<<(std::ostream& out, const CSExitRoom& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCExitRoom__isset {
  _SCExitRoom__isset() : result(false) {}
  bool result :1;
} _SCExitRoom__isset;

class SCExitRoom : public virtual ::apache::thrift::TBase {
 public:

  SCExitRoom(const SCExitRoom&);
  SCExitRoom& operator=(const SCExitRoom&);
  SCExitRoom() : result(0) {
  }

  virtual ~SCExitRoom() throw();
  int32_t result;

  _SCExitRoom__isset __isset;

  void __set_result(const int32_t val);

  bool operator == (const SCExitRoom & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const SCExitRoom &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCExitRoom & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCExitRoom &a, SCExitRoom &b);

inline std::ostream& operator<<(std::ostream& out, const SCExitRoom& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCRoomDestroyed__isset {
  _SCRoomDestroyed__isset() : result(false) {}
  bool result :1;
} _SCRoomDestroyed__isset;

class SCRoomDestroyed : public virtual ::apache::thrift::TBase {
 public:

  SCRoomDestroyed(const SCRoomDestroyed&);
  SCRoomDestroyed& operator=(const SCRoomDestroyed&);
  SCRoomDestroyed() : result(0) {
  }

  virtual ~SCRoomDestroyed() throw();
  int32_t result;

  _SCRoomDestroyed__isset __isset;

  void __set_result(const int32_t val);

  bool operator == (const SCRoomDestroyed & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const SCRoomDestroyed &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCRoomDestroyed & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCRoomDestroyed &a, SCRoomDestroyed &b);

inline std::ostream& operator<<(std::ostream& out, const SCRoomDestroyed& obj)
{
  obj.printTo(out);
  return out;
}


class CSStartBattle : public virtual ::apache::thrift::TBase {
 public:

  CSStartBattle(const CSStartBattle&);
  CSStartBattle& operator=(const CSStartBattle&);
  CSStartBattle() {
  }

  virtual ~CSStartBattle() throw();

  bool operator == (const CSStartBattle & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CSStartBattle &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSStartBattle & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSStartBattle &a, CSStartBattle &b);

inline std::ostream& operator<<(std::ostream& out, const CSStartBattle& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCBeginLoadResource__isset {
  _SCBeginLoadResource__isset() : result(false) {}
  bool result :1;
} _SCBeginLoadResource__isset;

class SCBeginLoadResource : public virtual ::apache::thrift::TBase {
 public:

  SCBeginLoadResource(const SCBeginLoadResource&);
  SCBeginLoadResource& operator=(const SCBeginLoadResource&);
  SCBeginLoadResource() : result(0) {
  }

  virtual ~SCBeginLoadResource() throw();
  int32_t result;

  _SCBeginLoadResource__isset __isset;

  void __set_result(const int32_t val);

  bool operator == (const SCBeginLoadResource & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const SCBeginLoadResource &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCBeginLoadResource & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCBeginLoadResource &a, SCBeginLoadResource &b);

inline std::ostream& operator<<(std::ostream& out, const SCBeginLoadResource& obj)
{
  obj.printTo(out);
  return out;
}


class CSEndLoadResource : public virtual ::apache::thrift::TBase {
 public:

  CSEndLoadResource(const CSEndLoadResource&);
  CSEndLoadResource& operator=(const CSEndLoadResource&);
  CSEndLoadResource() {
  }

  virtual ~CSEndLoadResource() throw();

  bool operator == (const CSEndLoadResource & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CSEndLoadResource &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSEndLoadResource & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSEndLoadResource &a, CSEndLoadResource &b);

inline std::ostream& operator<<(std::ostream& out, const CSEndLoadResource& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCStartBattle__isset {
  _SCStartBattle__isset() : result(false), startTime(false) {}
  bool result :1;
  bool startTime :1;
} _SCStartBattle__isset;

class SCStartBattle : public virtual ::apache::thrift::TBase {
 public:

  SCStartBattle(const SCStartBattle&);
  SCStartBattle& operator=(const SCStartBattle&);
  SCStartBattle() : result(0), startTime(0) {
  }

  virtual ~SCStartBattle() throw();
  int32_t result;
  int64_t startTime;

  _SCStartBattle__isset __isset;

  void __set_result(const int32_t val);

  void __set_startTime(const int64_t val);

  bool operator == (const SCStartBattle & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    if (!(startTime == rhs.startTime))
      return false;
    return true;
  }
  bool operator != (const SCStartBattle &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCStartBattle & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCStartBattle &a, SCStartBattle &b);

inline std::ostream& operator<<(std::ostream& out, const SCStartBattle& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCBattleResult__isset {
  _SCBattleResult__isset() : result(false), fectionScore(false) {}
  bool result :1;
  bool fectionScore :1;
} _SCBattleResult__isset;

class SCBattleResult : public virtual ::apache::thrift::TBase {
 public:

  SCBattleResult(const SCBattleResult&);
  SCBattleResult& operator=(const SCBattleResult&);
  SCBattleResult() : result(0) {
  }

  virtual ~SCBattleResult() throw();
  int32_t result;
  std::map<int32_t, int32_t>  fectionScore;

  _SCBattleResult__isset __isset;

  void __set_result(const int32_t val);

  void __set_fectionScore(const std::map<int32_t, int32_t> & val);

  bool operator == (const SCBattleResult & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    if (!(fectionScore == rhs.fectionScore))
      return false;
    return true;
  }
  bool operator != (const SCBattleResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCBattleResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCBattleResult &a, SCBattleResult &b);

inline std::ostream& operator<<(std::ostream& out, const SCBattleResult& obj)
{
  obj.printTo(out);
  return out;
}


class CSEndBattle : public virtual ::apache::thrift::TBase {
 public:

  CSEndBattle(const CSEndBattle&);
  CSEndBattle& operator=(const CSEndBattle&);
  CSEndBattle() {
  }

  virtual ~CSEndBattle() throw();

  bool operator == (const CSEndBattle & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CSEndBattle &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSEndBattle & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSEndBattle &a, CSEndBattle &b);

inline std::ostream& operator<<(std::ostream& out, const CSEndBattle& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCEndBattle__isset {
  _SCEndBattle__isset() : result(false) {}
  bool result :1;
} _SCEndBattle__isset;

class SCEndBattle : public virtual ::apache::thrift::TBase {
 public:

  SCEndBattle(const SCEndBattle&);
  SCEndBattle& operator=(const SCEndBattle&);
  SCEndBattle() : result(0) {
  }

  virtual ~SCEndBattle() throw();
  int32_t result;

  _SCEndBattle__isset __isset;

  void __set_result(const int32_t val);

  bool operator == (const SCEndBattle & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const SCEndBattle &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCEndBattle & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCEndBattle &a, SCEndBattle &b);

inline std::ostream& operator<<(std::ostream& out, const SCEndBattle& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CSPlayerInput__isset {
  _CSPlayerInput__isset() : commandList(false) {}
  bool commandList :1;
} _CSPlayerInput__isset;

class CSPlayerInput : public virtual ::apache::thrift::TBase {
 public:

  CSPlayerInput(const CSPlayerInput&);
  CSPlayerInput& operator=(const CSPlayerInput&);
  CSPlayerInput() {
  }

  virtual ~CSPlayerInput() throw();
  std::vector< ::PlayerOperateCommand>  commandList;

  _CSPlayerInput__isset __isset;

  void __set_commandList(const std::vector< ::PlayerOperateCommand> & val);

  bool operator == (const CSPlayerInput & rhs) const
  {
    if (!(commandList == rhs.commandList))
      return false;
    return true;
  }
  bool operator != (const CSPlayerInput &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSPlayerInput & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSPlayerInput &a, CSPlayerInput &b);

inline std::ostream& operator<<(std::ostream& out, const CSPlayerInput& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCPlayerInput__isset {
  _SCPlayerInput__isset() : commandList(false) {}
  bool commandList :1;
} _SCPlayerInput__isset;

class SCPlayerInput : public virtual ::apache::thrift::TBase {
 public:

  SCPlayerInput(const SCPlayerInput&);
  SCPlayerInput& operator=(const SCPlayerInput&);
  SCPlayerInput() {
  }

  virtual ~SCPlayerInput() throw();
  std::vector< ::PlayerOperateCommand>  commandList;

  _SCPlayerInput__isset __isset;

  void __set_commandList(const std::vector< ::PlayerOperateCommand> & val);

  bool operator == (const SCPlayerInput & rhs) const
  {
    if (!(commandList == rhs.commandList))
      return false;
    return true;
  }
  bool operator != (const SCPlayerInput &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCPlayerInput & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCPlayerInput &a, SCPlayerInput &b);

inline std::ostream& operator<<(std::ostream& out, const SCPlayerInput& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _CSSyncCommandMsg__isset {
  _CSSyncCommandMsg__isset() : commandList(false) {}
  bool commandList :1;
} _CSSyncCommandMsg__isset;

class CSSyncCommandMsg : public virtual ::apache::thrift::TBase {
 public:

  CSSyncCommandMsg(const CSSyncCommandMsg&);
  CSSyncCommandMsg& operator=(const CSSyncCommandMsg&);
  CSSyncCommandMsg() {
  }

  virtual ~CSSyncCommandMsg() throw();
  std::vector< ::SyncData>  commandList;

  _CSSyncCommandMsg__isset __isset;

  void __set_commandList(const std::vector< ::SyncData> & val);

  bool operator == (const CSSyncCommandMsg & rhs) const
  {
    if (!(commandList == rhs.commandList))
      return false;
    return true;
  }
  bool operator != (const CSSyncCommandMsg &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSSyncCommandMsg & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSSyncCommandMsg &a, CSSyncCommandMsg &b);

inline std::ostream& operator<<(std::ostream& out, const CSSyncCommandMsg& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCSyncCommandMsg__isset {
  _SCSyncCommandMsg__isset() : time(false), commandList(false) {}
  bool time :1;
  bool commandList :1;
} _SCSyncCommandMsg__isset;

class SCSyncCommandMsg : public virtual ::apache::thrift::TBase {
 public:

  SCSyncCommandMsg(const SCSyncCommandMsg&);
  SCSyncCommandMsg& operator=(const SCSyncCommandMsg&);
  SCSyncCommandMsg() : time(0) {
  }

  virtual ~SCSyncCommandMsg() throw();
  int32_t time;
  std::vector< ::SyncData>  commandList;

  _SCSyncCommandMsg__isset __isset;

  void __set_time(const int32_t val);

  void __set_commandList(const std::vector< ::SyncData> & val);

  bool operator == (const SCSyncCommandMsg & rhs) const
  {
    if (!(time == rhs.time))
      return false;
    if (!(commandList == rhs.commandList))
      return false;
    return true;
  }
  bool operator != (const SCSyncCommandMsg &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCSyncCommandMsg & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCSyncCommandMsg &a, SCSyncCommandMsg &b);

inline std::ostream& operator<<(std::ostream& out, const SCSyncCommandMsg& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCInstantiate__isset {
  _SCInstantiate__isset() : objList(false) {}
  bool objList :1;
} _SCInstantiate__isset;

class SCInstantiate : public virtual ::apache::thrift::TBase {
 public:

  SCInstantiate(const SCInstantiate&);
  SCInstantiate& operator=(const SCInstantiate&);
  SCInstantiate() {
  }

  virtual ~SCInstantiate() throw();
  std::vector< ::InstantiateData>  objList;

  _SCInstantiate__isset __isset;

  void __set_objList(const std::vector< ::InstantiateData> & val);

  bool operator == (const SCInstantiate & rhs) const
  {
    if (!(objList == rhs.objList))
      return false;
    return true;
  }
  bool operator != (const SCInstantiate &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCInstantiate & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCInstantiate &a, SCInstantiate &b);

inline std::ostream& operator<<(std::ostream& out, const SCInstantiate& obj)
{
  obj.printTo(out);
  return out;
}


class CSPing : public virtual ::apache::thrift::TBase {
 public:

  CSPing(const CSPing&);
  CSPing& operator=(const CSPing&);
  CSPing() {
  }

  virtual ~CSPing() throw();

  bool operator == (const CSPing & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CSPing &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CSPing & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CSPing &a, CSPing &b);

inline std::ostream& operator<<(std::ostream& out, const CSPing& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCPing__isset {
  _SCPing__isset() : result(false) {}
  bool result :1;
} _SCPing__isset;

class SCPing : public virtual ::apache::thrift::TBase {
 public:

  SCPing(const SCPing&);
  SCPing& operator=(const SCPing&);
  SCPing() : result(0) {
  }

  virtual ~SCPing() throw();
  int32_t result;

  _SCPing__isset __isset;

  void __set_result(const int32_t val);

  bool operator == (const SCPing & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    return true;
  }
  bool operator != (const SCPing &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCPing & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCPing &a, SCPing &b);

inline std::ostream& operator<<(std::ostream& out, const SCPing& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCServerInfo__isset {
  _SCServerInfo__isset() : currentServerTime(false) {}
  bool currentServerTime :1;
} _SCServerInfo__isset;

class SCServerInfo : public virtual ::apache::thrift::TBase {
 public:

  SCServerInfo(const SCServerInfo&);
  SCServerInfo& operator=(const SCServerInfo&);
  SCServerInfo() : currentServerTime(0) {
  }

  virtual ~SCServerInfo() throw();
  int64_t currentServerTime;

  _SCServerInfo__isset __isset;

  void __set_currentServerTime(const int64_t val);

  bool operator == (const SCServerInfo & rhs) const
  {
    if (!(currentServerTime == rhs.currentServerTime))
      return false;
    return true;
  }
  bool operator != (const SCServerInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCServerInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCServerInfo &a, SCServerInfo &b);

inline std::ostream& operator<<(std::ostream& out, const SCServerInfo& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SCFactionMsg__isset {
  _SCFactionMsg__isset() : shipId(false), regionId(false) {}
  bool shipId :1;
  bool regionId :1;
} _SCFactionMsg__isset;

class SCFactionMsg : public virtual ::apache::thrift::TBase {
 public:

  SCFactionMsg(const SCFactionMsg&);
  SCFactionMsg& operator=(const SCFactionMsg&);
  SCFactionMsg() : shipId(0), regionId(0) {
  }

  virtual ~SCFactionMsg() throw();
  int32_t shipId;
  int32_t regionId;

  _SCFactionMsg__isset __isset;

  void __set_shipId(const int32_t val);

  void __set_regionId(const int32_t val);

  bool operator == (const SCFactionMsg & rhs) const
  {
    if (!(shipId == rhs.shipId))
      return false;
    if (!(regionId == rhs.regionId))
      return false;
    return true;
  }
  bool operator != (const SCFactionMsg &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SCFactionMsg & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SCFactionMsg &a, SCFactionMsg &b);

inline std::ostream& operator<<(std::ostream& out, const SCFactionMsg& obj)
{
  obj.printTo(out);
  return out;
}



#endif
